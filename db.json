{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Swift第一节课类与结构体1.md","hash":"b7aec9cf6942086f11f0561eebb9ad25a38f378d","modified":1662080790418},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1661914716254},{"_id":"source/_posts/test-blog.md","hash":"f0b4090c6b1c1ef376267ffe71ab3a337c60fcdd","modified":1661935462214},{"_id":"source/_posts/Swift第一节课类与结构体2.md","hash":"1921750171e2f6803508a2688c0d875c280db8fe","modified":1662080658038},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1661933543918},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"2259a47510b226dd233c3380e685851488b9bc47","modified":1661933543957},{"_id":"node_modules/hexo-theme-next/package.json","hash":"b5b2cae7fb0e91f9da5967d0021cdd532ec33eca","modified":1661933543909},{"_id":"node_modules/hexo-theme-next/README.md","hash":"56638e4978154a2f2a3f03ba84047b77b4a499cc","modified":1661933543919},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"ae633efb9689ab7fea011c55e1710a5cca8bb188","modified":1662081519980},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1661933543910},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1661933543919},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1661933543910},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1661933543955},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1661933543959},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1661933543960},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1661933543960},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1661933543960},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1661933543960},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1661933543960},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1661933543960},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1661933543960},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"fccbf2855392186e11daa8590121073594037b7b","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1661933543965},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1661933543967},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1661933543958},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1661933543967},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1661933543959},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1661933543967},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1661933543967},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1661933543919},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1661933543919},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1661933543920},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"6c82bfd2ec8248c248da701f091b548a7a133580","modified":1661933543918},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1661933543930},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1661933543933},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1661933543917},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1661933543921},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1661933543915},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"ccf27b9249524b9fec1c15497b4353c8d1748c6c","modified":1661933543918},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1661933543926},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1661933543930},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1661933543921},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1661933543931},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1661933543933},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1661933543933},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1661933543930},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1661933543933},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":1661933543933},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1661933543902},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1661933543868},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1661933543870},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1661933543869},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1661933543902},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1661933543909},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1661933543935},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1661933543864},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1661933543935},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1661933543935},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1661933543942},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1661933543885},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1661933543955},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"f160e39943e39d7276da86adb47c3f08e5f22c7a","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"263eddabfae40e54c0591e7baa8403ade8cdd56d","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1661933543867},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1661933543883},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1661933543884},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1661933543880},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1661933543955},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1661933543927},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1661933543927},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1661933543920},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1661933543927},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1661933543929},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1661933543929},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1661933543920},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1661933543920},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1661933543930},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1661933543933},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1661933543909},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1661933543932},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1661933543932},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1661933543933},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1661933543932},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1661933543933},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1661933543927},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1661933543932},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1661933543919},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1661933543920},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1661933543927},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1661933543927},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1661933543920},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1661933543920},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1661933543919},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1661933543921},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1661933543921},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1661933543927},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1661933543927},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1661933543934},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1661933543930},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1661933543929},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1661933543929},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1661933543920},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1661933543921},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1661933543919},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1661933543928},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1661933543884},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1661933543930},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1661933543902},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1661933543901},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1661933543909},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1661933543906},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1661933543929},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1661933543872},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1661933543883},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1661933543884},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1661933543889},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1661933543902},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1661933543909},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1661933543892},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1661933543943},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1661933543943},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1661933543944},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1661933543946},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1661933543944},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1661933543946},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1661933543955},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1661933543955},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1661933543936},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1661933543939},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1661933543943},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1661933543943},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1661933543936},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1661933543938},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1661933543939},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1661933543936},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1661933543939},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1661933543939},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1661933543953},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1661933543942},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1661933543943},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1661933543943},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1661933543943},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1661933543866},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1661933543900},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1661933543875},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1661933543892},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1661933543878},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1661933543894},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1661933543909},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1661933543896},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1661933543903},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1661933543904},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1661933543905},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1661933543865},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1661933543944},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1661933543953},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1661933543955},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1661933543953},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1661933543955},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1661933543953},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1661933543944},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1661933543954},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1661933543953},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1661933543946},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"ff642130354a0b3be0d708c43044ed4d710b5e83","modified":1661933543946},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1661933543946},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1661933543953},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1661933543954},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1661933543953},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1661933543946},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1661933543954},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1661933543954},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1661933543954},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1661933543953},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1661933543955},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1661933543952},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1661933543946},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1661933543954},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1661933543952},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1661933543952},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1661933543952},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1661933543952},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1661933543946},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1661933543944},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1661933543945},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1661933543947},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1661933543948},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1661933543955},{"_id":"public/baidusitemap.xml","hash":"3f73df33b356b85e4c61a5c9e021a9e9da6de9f3","modified":1662081013621},{"_id":"public/sitemap.xml","hash":"852a7e4ea6382c3fdc21c15b3e325aab5791e455","modified":1662081013621},{"_id":"public/sitemap.txt","hash":"2517949e1a9bbb06462c88c5a2f3dc81d1210105","modified":1662081013621},{"_id":"public/2022/08/31/hello-world/index.html","hash":"f905f5a1006040d59e34185f23583dc8987c5f2a","modified":1662081788068},{"_id":"public/archives/index.html","hash":"8e4b7540d2e74ab3064d1077cfebf8f6929748f2","modified":1662081788068},{"_id":"public/archives/2022/index.html","hash":"88b6ad63c7f05d94e1eaa7ad3cd08ad1d71c7f3b","modified":1662081788068},{"_id":"public/archives/2022/08/index.html","hash":"1ea6b4123ff4adededf1bbb8c7dd8acd2062f91a","modified":1662081788068},{"_id":"public/archives/2022/09/index.html","hash":"e2e1e2d9576c3f8700e8c9ccf35f7153516b3129","modified":1662081788068},{"_id":"public/2022/09/02/Swift第一节课类与结构体2/index.html","hash":"0525b02acf24fb32faec4057d7c5ebb068940cc7","modified":1662081788068},{"_id":"public/2022/09/02/Swift第一节课类与结构体1/index.html","hash":"0f9c0ddaed3cee97612647a608e8d1420f1fdcf0","modified":1662081788068},{"_id":"public/2022/08/31/test-blog/index.html","hash":"5d992a759260798c210d1ae0b5b377de88aa9f2f","modified":1662081788068},{"_id":"public/index.html","hash":"0f2febf6e6914ece9c5c8b09013d36d30d2b2544","modified":1662081788068},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1662080820363},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1662080820363},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1662080820363},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1662080820363},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1662080820363},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1662080820363},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1662080820363},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1662080820363},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1662080820363},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1662080820363},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1662080820363},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1662080820363},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1662080820363},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1662080820363},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1662080820363},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1662080820363},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1662080820363},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1662080820363},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1662080820363},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1662080820363},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1662080820363},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1662080820363},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1662080820363},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1662080820363},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1662080820363},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1662080820363},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1662080820363},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1662080820363},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1662080820363},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1662080820363},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1662080820363},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1662080820363},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1662080820363},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1662080820363},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1662080820363},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1662080820363},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1662080820363},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1662080820363},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1662080820363},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1662080820363},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1662080820363},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1662080820363},{"_id":"public/css/main.css","hash":"e69654824a3183f5bf5d01963fd2d1847f6c5cad","modified":1662080820363},{"_id":"source/_posts/Swift第一节课属性.md","hash":"8cc446c1476ae26e284ccfd6a673b8baf2445d74","modified":1662080874415},{"_id":"public/2022/09/02/Swift第一节课属性/index.html","hash":"28e4ff7f97e901c4e81980bdb49d7399ee22e9b0","modified":1662081788068}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Swift第一节课类与结构体1","date":"2022-09-02T00:53:26.000Z","_content":"---\nhighlight: a11y-dark\n---\n\n# 一、Swift中的类型\nSwfit中重要的两种类型 ：**类类型** 、**结构体类型**\n\n结构体和类相同点：\n1. 定义存储值的属性\n2. 定义方法\n3. 定义下标及下标语法提供对其值的访问\n4. 定义初始化器\n5. 使用extension来拓展功能\n6. 遵循协议来提供某种功能\n结构体和类不同点：\n1. 类有继承的特性，而结构体没有\n2. 类型转换使我们能在运行时检查和解释实例的类型\n3. 类有析构函数来释放其分配的资源\n4. 引用计数允许一个类实例有多个引用\n5，类是引用类型，结构体是值类型，引用类型就相当于在线的 Excel ，当我们把这个链接共享给别人的时候，别人的修改我们 是能够看到的;值类型就相当于本地的 Excel ,当我们把本地的 Excel 传递给别人的时候，就 相当于重新复制了一份给别人，至于他们对于内容的修改我们是无法感知的。\n\n6.引用类型和值类型还有一个最直观的区别就是存储的位置不同:一般情况，值类型存储的在\n 栈上，引用类型存储在堆上。\n# Tips：内存区域\n\n![WeChata9d08c0e3940ed090c00fbc6a5b6938f.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21b647805389408e839f7c58a717a733~tplv-k3u1fbpfcp-watermark.image?)\n栈区（`stack`）：局部变量和函数运行过程中的上下文\n\n```swift\nfunc test(){//test就是个函数\n//在函数内部声明的age变量就是一个局部变量\n    var age : Int = 0\n    print(age)\n}\n```\n堆区（`Heap`）：存储所有对象;\n\n`Global` ：存储全局变量，常量，代码区;\n\n`Segment&Section`:Mach-O文件有多个段（Segment），每个段都有不同的功能。每个段又分为很多小的`Section`\n- TEXT.text    : 机器码\n- TEXT.cstring : 硬编码的字符串\n- TEXT.const   : 初始化过的常量\n- DATA.data    : 初始化过的可变（静态/全局）数据\n- DATA.const   : 没有初始化的常量\n- DATA.bss     : 没有初始化的（静态/全局）变量\n- DATA.common  : 没有初始化的符号声明\n \n \n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09ef978df92148418b3d1608ed016c88~tplv-k3u1fbpfcp-watermark.image?)\n### 1. 结构体 struct\n1. 定义一个结构体\n\n```swift\nstruct LGSSJTeacher{\n    var age : Int\n    var name: String\n    //struct可以不写初始化器\n//    init(age: Int,name: String) {\n//        self.age = age\n//        self.name = name\n//    }\n}\n\nvar t = LGSSJTeacher(age: 10, name: \"乔帮主\")\n\n```\n结构体会默认生成一个初始化器，一旦在定义结构体时自定义初始化器，就不会默认生成其他初始化器。\n对结构体进行初始化的时候，必须保证结构体的成员都有值，当我们给一个结构体的成员变量设置初始值的时候，可以不用在调用初始化器的时候传参数给有值的变量。\n\n```swift\nstruct SJPerson {\n    var age: Int\n    var weight: Int\n    var sex: Bool\n}\nprint(MemoryLayout<SJPerson>.size)         // 17\nprint(MemoryLayout<SJPerson>.stride)       // 24\nprint(MemoryLayout<SJPerson>.alignment)    // 8\n```\n打印其内存和对齐的字节数，在64位系统下，Int占8个字节，bool占一个字节，8+8+1=17，但因为内存对齐原则，系统会分配24字节来存储SJPerson\n\n### 2、类 class\n```swift\nclass LGSSJTeacher{\n    var age : Int\n    var name: String\n    //struct可以不写初始化器\n    //class 必须指定初始化器，当类成员没有初始值时\n    init(age: Int,name: String) {\n        self.age = age\n        self.name = name\n    }\n}\n\nvar t = LGSSJTeacher(age: 10, name: \"乔峰\")\n```\n类是引用类型，意味着一个类类型的变量并不直接存储具体的实例对象，是对当前存储实例内存地址的引用，可以看出t和t1指向地址一致，本身不存储，自身的地址不一致\n\n```swift\n#####t和t1 指向的地址一样\n**(lldb) p t**\n\n(LGSwiftTest.LGSSJTeacher) $R0 = 0x0000000100576cc0 (age = 20, name = \"ssj\")\n\n**(lldb) p t1**\n\n(LGSwiftTest.LGSSJTeacher) $R1 = 0x0000000100576cc0 (age = 20, name = \"ssj\")\n\n**(lldb) x/8g 0x0000000100576cc0**\n\n0x100576cc0: 0x0000000100008180 0x0000000600000003\n\n0x100576cd0: 0x0000000000000014 0x00000000006a7373\n\n0x100576ce0: 0xe300000000000000 0x0000000000000000\n\n0x100576cf0: 0x0000000000000050 0x00000001c5c4c000\n######t和t1 的地址不一样 两者相差8个字节\n\n**(lldb) po withUnsafePointer(to: &t1){print($0)}**\n\n**0x0000000100008220**\n\n0 elements\n\n****\\\n\n\n**(lldb) po withUnsafePointer(to: &t){print($0)}**\n\n**0x0000000100008218**\n\n0 elements\n\n```\n## 对象的堆空间申请过程\n在Swift中，创建类对象需要向堆空间申请内存，大概流程如下\n\n1. class._allocating_init()\n2. libswiftCore.dylib:swift_allocObject\n3. libswiftCore.dylib:swift_slowAlloc\n4. libsystem_malloc.dylib:malloc\n在Mac。iOS中的 `malloc`函数分配的内存大小总是16的倍数。\n\n```swift\nclass LGPonit{\n    var x = 16\n    var y = 18\n    var test = false\n}\n\nvar p = LGPonit()\n//class_getInstanceSize ： 返回类的实例大小\nprint(class_getInstanceSize(LGPonit.self))\n//malloc_size 系统分配的内存大小\nprint(malloc_size(unsafeBitCast(p, to: UnsafeRawPointer.self)))\nprint(\"end\")\n```\n- 可以看到，类大小40字节，系统分配48字节\n- 在类中 x是int占8个字节，y也是8个字节，test占一个（bool值），17个字节，但是类存储在堆空间中，前面需要8个字节存储类型信息，8个字节存储引用计数，33个字节，根据内存对齐（8字节对齐（4x8=32<33,需要再分配一个8字节凑数）），所以5*8=40字节。\n- 因为上面所说，`malloc`函数分配的内存大小时16的倍数，所以最终系统分配了48字节给LGPoint。\n## 类的初始化器\n1.指定初始化器 看上面的\n\n2.可失败初始化器\n\n当初始值不满足某个条件时，需要给初始化方法返回一个nil，可以在init后面接一个可选项？来修饰\n\n```swift\nclass SPerson {\n    var age: Int\n    var name: String\n\n    init?(age: Int, name: String) {\n        if age < 18 { return nil}\n        self.age = age\n        self.name = name\n    }\n}\n\nlet p1 = SPerson(age: 16, name: \"乔峰\")\nlet p2 = SPerson(age: 18, name: \"虚竹\")\nprint(\"p1 - \\(String(describing: p1))\")\nprint(\"p2 - \\(String(describing: p2))\")\n\n打印结果：\np1 - nil\np2 - Optional(_1_结构体与类.SPerson)\n```\n3.必要初始化器\n\n当初始化器器需要在init前面使用required修饰\n\n\n```swift\nclass SPerson {\n    var age: Int\n    var name: String\n    // 父类定义必要实现初始化器\n    required init(age: Int, name: String) {\n        self.age = age\n        self.name = name\n    }\n}\n\nclass SStudent: SPerson {\n    var height: Int\n\n    init(height: Int) {\n    self.height = height\n        super.init(age: 18, name: \"乔峰\")\n    }\n\n    // 子类必须实现父类的必要初始化器\n    required init(age: Int, name: String) {\n        fatalError(\"init(age:name:) has not been implemented\")\n    }\n}\n\n```\n4.便捷初始化器\n\n为么可以为类提供一个便捷初始化器，需要在init前用convenience修饰\n\n如代码所示 便捷初始化器必须从相同的类里面调用另一个初始化器，并且最终必须调用一个指定初始化器\n```swift\nclass SPerson {\n    var age: Int\n    var name: String\n\n    init(age: Int, name: String) {\n        self.age = age\n        self.name = name\n    }\n\n    convenience init() {\n        self.init(age: 18, name: \"乔峰\")\n    }\n}\n\n```\n#  二、Swift中编译流程\n## 1.swift代码编译流程\n\n iOS不管是OC还是Swift，都是通过LLVM进行编译的，OC通clang编译器，编译成IR，然后再生成可执行文件.o(机器码)，swift则是通过Swift编译器编译出IR，然后再生成可执行文件.o\n![WeChat786fb5f947ff1b9f3dadf7f38d9d6477.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8c1385531404205a83562359f6a3e2f~tplv-k3u1fbpfcp-watermark.image?)\n\n![WeChat32c482bd2a20e5b8f93d803441b9b383.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87defffca10340599e195425be0bd72a~tplv-k3u1fbpfcp-watermark.image?)\n- 首先`swift Code` 经过 `-dump-parse` 进行语义分析解析成 `Parse`（抽象语法树）\n- `parse`经过-dump-ast 进行语义分析语法是否正确，是否安全\n- `sema` 之后会把 swift-code 降级变成`SILGen`（swift中间代码），对于SILGen又分为Raw SIL和经过优化的SIL opt Canonical SIL。\n- 优化完成的`SIL` 会由LLVM降级成为IR，降级之后由后端代码编译成机器码\n### 编译命令\n\n```swift\n// 分析输出AST\nswiftc main.swift -dump-parse\n\n// 分析并且检查类型输出AST\nswiftc main.swift -dump-ast\n\n// 生成中间体语言（SIL），未优化\nswiftc main.swift -emit-silgen\n\n// 生成中间体语言（SIL），优化后的\nswiftc main.swift -emit-sil\n\n// 生成LLVM中间体语言 （.ll文件）\nswiftc main.swift -emit-ir\n\n// 生成LLVM中间体语言 （.bc文件）\nswiftc main.swift -emit-bc\n\n// 生成汇编\nswiftc main.swift -emit-assembly\n\n// 编译生成可执行.out文件\nswiftc -o main.o main.swift\n\n```\n### 将代码编译成 sil 代码\n\n```swift\nclass LGPonit{\n    var x = 16\n    var y = 18\n    var test = false\n}\n\nvar p = LGPonit()\n```\n终端 cd 到项目的 main.swift 目录，输入 `swiftc main.swift -emit-sil` 并按回车键，会在生成一个 main.sil 文件，并且会在终端输出 SIL 代码。 SIL 代码如下：\n\n![WeChat3a52e986915c40fa8621a51ce0ac2619.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf393a7324b74b2595f7c5981c2df45a~tplv-k3u1fbpfcp-watermark.image?)\n关于 SIL 的语法说明，其实也有相应的文档。这里贴上文档说明的地址：[SIL参考文档](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fapple%2Fswift%2Fblob%2Fmain%2Fdocs%2FSIL.rst%23sil-stage \"https://github.com/apple/swift/blob/main/docs/SIL.rst#sil-stage\")\n### 汇编探索初始化流程\n通过汇编查看，SPerson 在进行初始化的时候，在底层会调用 `__allocating_init` 的函数，那么 `__allocating_init` 做了什么事情呢，跟进去看一下。\n\n让断点走到 `__allocating_init` 这一行代码，按住 control 键，点击这个向下的按钮。\n可以看到，进入到 `__allocating_init` 的内部实现后，发现它会调用一个 `swift_allocObject` 函数，那么在继续跟汇编的时候跟丢了。\n\n接下来我们来看一下源码。源码可以去苹果官网下-[swift源码下载地址](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fapple%2Fswift \"https://github.com/apple/swift\")。用 VSCode 打开下载好的 swift 源码，全局搜索 `swift_allocObject` 这个函数。\n\n在 `HeapObject.cpp` 文件中找到 `swift_allocObject` 函数的实现，并且在 `swift_allocObject` 函数的实现上方，有一个 `_swift_allocObject_` 函数的实现。\n\n```swift\n// 第一个参数，元数据。\n// 第二个参数，分配内存的大小\n// 第三个参数，内存对齐，值一般为 7，因为遵守8字节对齐\nstatic HeapObject *_swift_allocObject_(HeapMetadata const *metadata,\n                                    size_t requiredSize,\n                                    size_t requiredAlignmentMask) {\nassert(isAlignmentMask(requiredAlignmentMask));\nauto object = reinterpret_cast<HeapObject *>(\n   swift_slowAlloc(requiredSize, requiredAlignmentMask));\n\n// NOTE: this relies on the C++17 guaranteed semantics of no null-pointer\n// check on the placement new allocator which we have observed on Windows,\n// Linux, and macOS.\nnew (object) HeapObject(metadata);\n\n// If leak tracking is enabled, start tracking this object.\nSWIFT_LEAKS_START_TRACKING_OBJECT(object);\n\nSWIFT_RT_TRACK_INVOCATION(object, swift_allocObject);\n\nreturn object;\n}\n\n```\n在函数的内部会调用一个 `swift_slowAlloc` 函数，我们来看下 `swift_slowAlloc` 函数的内部实现：\n\n```swift\nvoid *swift::swift_slowAlloc(size_t size, size_t alignMask) {\nvoid *p;\n// This check also forces \"default\" alignment to use AlignedAlloc.\nif (alignMask <= MALLOC_ALIGN_MASK) {\n#if defined(__APPLE__)\n p = malloc_zone_malloc(DEFAULT_ZONE(), size);\n#else\n p = malloc(size);\n#endif\n} else {\n size_t alignment = (alignMask == ~(size_t(0)))\n                        ? _swift_MinAllocationAlignment\n                        : alignMask + 1;\n p = AlignedAlloc(size, alignment);\n}\nif (!p) swift::crash(\"Could not allocate memory.\");\nreturn p;\n}\n\n```\n函数内部会调用一个swift——slowAlloc 函数，我们来看内部实现\n\n```swift\nvoid *swift::swift_slowAlloc(size_t size, size_t alignMask) {\nvoid *p;\n// This check also forces \"default\" alignment to use AlignedAlloc.\nif (alignMask <= MALLOC_ALIGN_MASK) {\n#if defined(__APPLE__)\n p = malloc_zone_malloc(DEFAULT_ZONE(), size);\n#else\n p = malloc(size);\n#endif\n} else {\n size_t alignment = (alignMask == ~(size_t(0)))\n                        ? _swift_MinAllocationAlignment\n                        : alignMask + 1;\n p = AlignedAlloc(size, alignment);\n}\nif (!p) swift::crash(\"Could not allocate memory.\");\nreturn p;\n}\n```\n`swift_slowAlloc` 函数的内部是去进行一些分配内存的操作，比如 `malloc`。所以就印证了类对象实例引用类型->对象申请堆空间的过程。\n\n","source":"_posts/Swift第一节课类与结构体1.md","raw":"---\ntitle: Swift第一节课类与结构体1\ndate: 2022-09-02 08:53:26\ntags:\n---\n---\nhighlight: a11y-dark\n---\n\n# 一、Swift中的类型\nSwfit中重要的两种类型 ：**类类型** 、**结构体类型**\n\n结构体和类相同点：\n1. 定义存储值的属性\n2. 定义方法\n3. 定义下标及下标语法提供对其值的访问\n4. 定义初始化器\n5. 使用extension来拓展功能\n6. 遵循协议来提供某种功能\n结构体和类不同点：\n1. 类有继承的特性，而结构体没有\n2. 类型转换使我们能在运行时检查和解释实例的类型\n3. 类有析构函数来释放其分配的资源\n4. 引用计数允许一个类实例有多个引用\n5，类是引用类型，结构体是值类型，引用类型就相当于在线的 Excel ，当我们把这个链接共享给别人的时候，别人的修改我们 是能够看到的;值类型就相当于本地的 Excel ,当我们把本地的 Excel 传递给别人的时候，就 相当于重新复制了一份给别人，至于他们对于内容的修改我们是无法感知的。\n\n6.引用类型和值类型还有一个最直观的区别就是存储的位置不同:一般情况，值类型存储的在\n 栈上，引用类型存储在堆上。\n# Tips：内存区域\n\n![WeChata9d08c0e3940ed090c00fbc6a5b6938f.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21b647805389408e839f7c58a717a733~tplv-k3u1fbpfcp-watermark.image?)\n栈区（`stack`）：局部变量和函数运行过程中的上下文\n\n```swift\nfunc test(){//test就是个函数\n//在函数内部声明的age变量就是一个局部变量\n    var age : Int = 0\n    print(age)\n}\n```\n堆区（`Heap`）：存储所有对象;\n\n`Global` ：存储全局变量，常量，代码区;\n\n`Segment&Section`:Mach-O文件有多个段（Segment），每个段都有不同的功能。每个段又分为很多小的`Section`\n- TEXT.text    : 机器码\n- TEXT.cstring : 硬编码的字符串\n- TEXT.const   : 初始化过的常量\n- DATA.data    : 初始化过的可变（静态/全局）数据\n- DATA.const   : 没有初始化的常量\n- DATA.bss     : 没有初始化的（静态/全局）变量\n- DATA.common  : 没有初始化的符号声明\n \n \n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09ef978df92148418b3d1608ed016c88~tplv-k3u1fbpfcp-watermark.image?)\n### 1. 结构体 struct\n1. 定义一个结构体\n\n```swift\nstruct LGSSJTeacher{\n    var age : Int\n    var name: String\n    //struct可以不写初始化器\n//    init(age: Int,name: String) {\n//        self.age = age\n//        self.name = name\n//    }\n}\n\nvar t = LGSSJTeacher(age: 10, name: \"乔帮主\")\n\n```\n结构体会默认生成一个初始化器，一旦在定义结构体时自定义初始化器，就不会默认生成其他初始化器。\n对结构体进行初始化的时候，必须保证结构体的成员都有值，当我们给一个结构体的成员变量设置初始值的时候，可以不用在调用初始化器的时候传参数给有值的变量。\n\n```swift\nstruct SJPerson {\n    var age: Int\n    var weight: Int\n    var sex: Bool\n}\nprint(MemoryLayout<SJPerson>.size)         // 17\nprint(MemoryLayout<SJPerson>.stride)       // 24\nprint(MemoryLayout<SJPerson>.alignment)    // 8\n```\n打印其内存和对齐的字节数，在64位系统下，Int占8个字节，bool占一个字节，8+8+1=17，但因为内存对齐原则，系统会分配24字节来存储SJPerson\n\n### 2、类 class\n```swift\nclass LGSSJTeacher{\n    var age : Int\n    var name: String\n    //struct可以不写初始化器\n    //class 必须指定初始化器，当类成员没有初始值时\n    init(age: Int,name: String) {\n        self.age = age\n        self.name = name\n    }\n}\n\nvar t = LGSSJTeacher(age: 10, name: \"乔峰\")\n```\n类是引用类型，意味着一个类类型的变量并不直接存储具体的实例对象，是对当前存储实例内存地址的引用，可以看出t和t1指向地址一致，本身不存储，自身的地址不一致\n\n```swift\n#####t和t1 指向的地址一样\n**(lldb) p t**\n\n(LGSwiftTest.LGSSJTeacher) $R0 = 0x0000000100576cc0 (age = 20, name = \"ssj\")\n\n**(lldb) p t1**\n\n(LGSwiftTest.LGSSJTeacher) $R1 = 0x0000000100576cc0 (age = 20, name = \"ssj\")\n\n**(lldb) x/8g 0x0000000100576cc0**\n\n0x100576cc0: 0x0000000100008180 0x0000000600000003\n\n0x100576cd0: 0x0000000000000014 0x00000000006a7373\n\n0x100576ce0: 0xe300000000000000 0x0000000000000000\n\n0x100576cf0: 0x0000000000000050 0x00000001c5c4c000\n######t和t1 的地址不一样 两者相差8个字节\n\n**(lldb) po withUnsafePointer(to: &t1){print($0)}**\n\n**0x0000000100008220**\n\n0 elements\n\n****\\\n\n\n**(lldb) po withUnsafePointer(to: &t){print($0)}**\n\n**0x0000000100008218**\n\n0 elements\n\n```\n## 对象的堆空间申请过程\n在Swift中，创建类对象需要向堆空间申请内存，大概流程如下\n\n1. class._allocating_init()\n2. libswiftCore.dylib:swift_allocObject\n3. libswiftCore.dylib:swift_slowAlloc\n4. libsystem_malloc.dylib:malloc\n在Mac。iOS中的 `malloc`函数分配的内存大小总是16的倍数。\n\n```swift\nclass LGPonit{\n    var x = 16\n    var y = 18\n    var test = false\n}\n\nvar p = LGPonit()\n//class_getInstanceSize ： 返回类的实例大小\nprint(class_getInstanceSize(LGPonit.self))\n//malloc_size 系统分配的内存大小\nprint(malloc_size(unsafeBitCast(p, to: UnsafeRawPointer.self)))\nprint(\"end\")\n```\n- 可以看到，类大小40字节，系统分配48字节\n- 在类中 x是int占8个字节，y也是8个字节，test占一个（bool值），17个字节，但是类存储在堆空间中，前面需要8个字节存储类型信息，8个字节存储引用计数，33个字节，根据内存对齐（8字节对齐（4x8=32<33,需要再分配一个8字节凑数）），所以5*8=40字节。\n- 因为上面所说，`malloc`函数分配的内存大小时16的倍数，所以最终系统分配了48字节给LGPoint。\n## 类的初始化器\n1.指定初始化器 看上面的\n\n2.可失败初始化器\n\n当初始值不满足某个条件时，需要给初始化方法返回一个nil，可以在init后面接一个可选项？来修饰\n\n```swift\nclass SPerson {\n    var age: Int\n    var name: String\n\n    init?(age: Int, name: String) {\n        if age < 18 { return nil}\n        self.age = age\n        self.name = name\n    }\n}\n\nlet p1 = SPerson(age: 16, name: \"乔峰\")\nlet p2 = SPerson(age: 18, name: \"虚竹\")\nprint(\"p1 - \\(String(describing: p1))\")\nprint(\"p2 - \\(String(describing: p2))\")\n\n打印结果：\np1 - nil\np2 - Optional(_1_结构体与类.SPerson)\n```\n3.必要初始化器\n\n当初始化器器需要在init前面使用required修饰\n\n\n```swift\nclass SPerson {\n    var age: Int\n    var name: String\n    // 父类定义必要实现初始化器\n    required init(age: Int, name: String) {\n        self.age = age\n        self.name = name\n    }\n}\n\nclass SStudent: SPerson {\n    var height: Int\n\n    init(height: Int) {\n    self.height = height\n        super.init(age: 18, name: \"乔峰\")\n    }\n\n    // 子类必须实现父类的必要初始化器\n    required init(age: Int, name: String) {\n        fatalError(\"init(age:name:) has not been implemented\")\n    }\n}\n\n```\n4.便捷初始化器\n\n为么可以为类提供一个便捷初始化器，需要在init前用convenience修饰\n\n如代码所示 便捷初始化器必须从相同的类里面调用另一个初始化器，并且最终必须调用一个指定初始化器\n```swift\nclass SPerson {\n    var age: Int\n    var name: String\n\n    init(age: Int, name: String) {\n        self.age = age\n        self.name = name\n    }\n\n    convenience init() {\n        self.init(age: 18, name: \"乔峰\")\n    }\n}\n\n```\n#  二、Swift中编译流程\n## 1.swift代码编译流程\n\n iOS不管是OC还是Swift，都是通过LLVM进行编译的，OC通clang编译器，编译成IR，然后再生成可执行文件.o(机器码)，swift则是通过Swift编译器编译出IR，然后再生成可执行文件.o\n![WeChat786fb5f947ff1b9f3dadf7f38d9d6477.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8c1385531404205a83562359f6a3e2f~tplv-k3u1fbpfcp-watermark.image?)\n\n![WeChat32c482bd2a20e5b8f93d803441b9b383.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87defffca10340599e195425be0bd72a~tplv-k3u1fbpfcp-watermark.image?)\n- 首先`swift Code` 经过 `-dump-parse` 进行语义分析解析成 `Parse`（抽象语法树）\n- `parse`经过-dump-ast 进行语义分析语法是否正确，是否安全\n- `sema` 之后会把 swift-code 降级变成`SILGen`（swift中间代码），对于SILGen又分为Raw SIL和经过优化的SIL opt Canonical SIL。\n- 优化完成的`SIL` 会由LLVM降级成为IR，降级之后由后端代码编译成机器码\n### 编译命令\n\n```swift\n// 分析输出AST\nswiftc main.swift -dump-parse\n\n// 分析并且检查类型输出AST\nswiftc main.swift -dump-ast\n\n// 生成中间体语言（SIL），未优化\nswiftc main.swift -emit-silgen\n\n// 生成中间体语言（SIL），优化后的\nswiftc main.swift -emit-sil\n\n// 生成LLVM中间体语言 （.ll文件）\nswiftc main.swift -emit-ir\n\n// 生成LLVM中间体语言 （.bc文件）\nswiftc main.swift -emit-bc\n\n// 生成汇编\nswiftc main.swift -emit-assembly\n\n// 编译生成可执行.out文件\nswiftc -o main.o main.swift\n\n```\n### 将代码编译成 sil 代码\n\n```swift\nclass LGPonit{\n    var x = 16\n    var y = 18\n    var test = false\n}\n\nvar p = LGPonit()\n```\n终端 cd 到项目的 main.swift 目录，输入 `swiftc main.swift -emit-sil` 并按回车键，会在生成一个 main.sil 文件，并且会在终端输出 SIL 代码。 SIL 代码如下：\n\n![WeChat3a52e986915c40fa8621a51ce0ac2619.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf393a7324b74b2595f7c5981c2df45a~tplv-k3u1fbpfcp-watermark.image?)\n关于 SIL 的语法说明，其实也有相应的文档。这里贴上文档说明的地址：[SIL参考文档](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fapple%2Fswift%2Fblob%2Fmain%2Fdocs%2FSIL.rst%23sil-stage \"https://github.com/apple/swift/blob/main/docs/SIL.rst#sil-stage\")\n### 汇编探索初始化流程\n通过汇编查看，SPerson 在进行初始化的时候，在底层会调用 `__allocating_init` 的函数，那么 `__allocating_init` 做了什么事情呢，跟进去看一下。\n\n让断点走到 `__allocating_init` 这一行代码，按住 control 键，点击这个向下的按钮。\n可以看到，进入到 `__allocating_init` 的内部实现后，发现它会调用一个 `swift_allocObject` 函数，那么在继续跟汇编的时候跟丢了。\n\n接下来我们来看一下源码。源码可以去苹果官网下-[swift源码下载地址](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fapple%2Fswift \"https://github.com/apple/swift\")。用 VSCode 打开下载好的 swift 源码，全局搜索 `swift_allocObject` 这个函数。\n\n在 `HeapObject.cpp` 文件中找到 `swift_allocObject` 函数的实现，并且在 `swift_allocObject` 函数的实现上方，有一个 `_swift_allocObject_` 函数的实现。\n\n```swift\n// 第一个参数，元数据。\n// 第二个参数，分配内存的大小\n// 第三个参数，内存对齐，值一般为 7，因为遵守8字节对齐\nstatic HeapObject *_swift_allocObject_(HeapMetadata const *metadata,\n                                    size_t requiredSize,\n                                    size_t requiredAlignmentMask) {\nassert(isAlignmentMask(requiredAlignmentMask));\nauto object = reinterpret_cast<HeapObject *>(\n   swift_slowAlloc(requiredSize, requiredAlignmentMask));\n\n// NOTE: this relies on the C++17 guaranteed semantics of no null-pointer\n// check on the placement new allocator which we have observed on Windows,\n// Linux, and macOS.\nnew (object) HeapObject(metadata);\n\n// If leak tracking is enabled, start tracking this object.\nSWIFT_LEAKS_START_TRACKING_OBJECT(object);\n\nSWIFT_RT_TRACK_INVOCATION(object, swift_allocObject);\n\nreturn object;\n}\n\n```\n在函数的内部会调用一个 `swift_slowAlloc` 函数，我们来看下 `swift_slowAlloc` 函数的内部实现：\n\n```swift\nvoid *swift::swift_slowAlloc(size_t size, size_t alignMask) {\nvoid *p;\n// This check also forces \"default\" alignment to use AlignedAlloc.\nif (alignMask <= MALLOC_ALIGN_MASK) {\n#if defined(__APPLE__)\n p = malloc_zone_malloc(DEFAULT_ZONE(), size);\n#else\n p = malloc(size);\n#endif\n} else {\n size_t alignment = (alignMask == ~(size_t(0)))\n                        ? _swift_MinAllocationAlignment\n                        : alignMask + 1;\n p = AlignedAlloc(size, alignment);\n}\nif (!p) swift::crash(\"Could not allocate memory.\");\nreturn p;\n}\n\n```\n函数内部会调用一个swift——slowAlloc 函数，我们来看内部实现\n\n```swift\nvoid *swift::swift_slowAlloc(size_t size, size_t alignMask) {\nvoid *p;\n// This check also forces \"default\" alignment to use AlignedAlloc.\nif (alignMask <= MALLOC_ALIGN_MASK) {\n#if defined(__APPLE__)\n p = malloc_zone_malloc(DEFAULT_ZONE(), size);\n#else\n p = malloc(size);\n#endif\n} else {\n size_t alignment = (alignMask == ~(size_t(0)))\n                        ? _swift_MinAllocationAlignment\n                        : alignMask + 1;\n p = AlignedAlloc(size, alignment);\n}\nif (!p) swift::crash(\"Could not allocate memory.\");\nreturn p;\n}\n```\n`swift_slowAlloc` 函数的内部是去进行一些分配内存的操作，比如 `malloc`。所以就印证了类对象实例引用类型->对象申请堆空间的过程。\n\n","slug":"Swift第一节课类与结构体1","published":1,"updated":"2022-09-02T01:06:30.418Z","_id":"cl7jrxzh40000qaut8hs3gno4","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h2 id=\"highlight-a11y-dark\"><a href=\"#highlight-a11y-dark\" class=\"headerlink\" title=\"highlight: a11y-dark\"></a>highlight: a11y-dark</h2><h1 id=\"一、Swift中的类型\"><a href=\"#一、Swift中的类型\" class=\"headerlink\" title=\"一、Swift中的类型\"></a>一、Swift中的类型</h1><p>Swfit中重要的两种类型 ：<strong>类类型</strong> 、<strong>结构体类型</strong></p>\n<p>结构体和类相同点：</p>\n<ol>\n<li>定义存储值的属性</li>\n<li>定义方法</li>\n<li>定义下标及下标语法提供对其值的访问</li>\n<li>定义初始化器</li>\n<li>使用extension来拓展功能</li>\n<li>遵循协议来提供某种功能<br>结构体和类不同点：</li>\n<li>类有继承的特性，而结构体没有</li>\n<li>类型转换使我们能在运行时检查和解释实例的类型</li>\n<li>类有析构函数来释放其分配的资源</li>\n<li>引用计数允许一个类实例有多个引用<br>5，类是引用类型，结构体是值类型，引用类型就相当于在线的 Excel ，当我们把这个链接共享给别人的时候，别人的修改我们 是能够看到的;值类型就相当于本地的 Excel ,当我们把本地的 Excel 传递给别人的时候，就 相当于重新复制了一份给别人，至于他们对于内容的修改我们是无法感知的。</li>\n</ol>\n<p>6.引用类型和值类型还有一个最直观的区别就是存储的位置不同:一般情况，值类型存储的在<br> 栈上，引用类型存储在堆上。</p>\n<h1 id=\"Tips：内存区域\"><a href=\"#Tips：内存区域\" class=\"headerlink\" title=\"Tips：内存区域\"></a>Tips：内存区域</h1><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21b647805389408e839f7c58a717a733~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChata9d08c0e3940ed090c00fbc6a5b6938f.png\"><br>栈区（<code>stack</code>）：局部变量和函数运行过程中的上下文</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>(){<span class=\"comment\">//test就是个函数</span></span><br><span class=\"line\"><span class=\"comment\">//在函数内部声明的age变量就是一个局部变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age : <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(age)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>堆区（<code>Heap</code>）：存储所有对象;</p>\n<p><code>Global</code> ：存储全局变量，常量，代码区;</p>\n<p><code>Segment&amp;Section</code>:Mach-O文件有多个段（Segment），每个段都有不同的功能。每个段又分为很多小的<code>Section</code></p>\n<ul>\n<li>TEXT.text    : 机器码</li>\n<li>TEXT.cstring : 硬编码的字符串</li>\n<li>TEXT.const   : 初始化过的常量</li>\n<li>DATA.data    : 初始化过的可变（静态/全局）数据</li>\n<li>DATA.const   : 没有初始化的常量</li>\n<li>DATA.bss     : 没有初始化的（静态/全局）变量</li>\n<li>DATA.common  : 没有初始化的符号声明</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09ef978df92148418b3d1608ed016c88~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h3 id=\"1-结构体-struct\"><a href=\"#1-结构体-struct\" class=\"headerlink\" title=\"1. 结构体 struct\"></a>1. 结构体 struct</h3><ol>\n<li>定义一个结构体</li>\n</ol>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LGSSJTeacher</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age : <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"comment\">//struct可以不写初始化器</span></span><br><span class=\"line\"><span class=\"comment\">//    init(age: Int,name: String) {</span></span><br><span class=\"line\"><span class=\"comment\">//        self.age = age</span></span><br><span class=\"line\"><span class=\"comment\">//        self.name = name</span></span><br><span class=\"line\"><span class=\"comment\">//    }</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> t <span class=\"operator\">=</span> <span class=\"type\">LGSSJTeacher</span>(age: <span class=\"number\">10</span>, name: <span class=\"string\">\"乔帮主\"</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>结构体会默认生成一个初始化器，一旦在定义结构体时自定义初始化器，就不会默认生成其他初始化器。<br>对结构体进行初始化的时候，必须保证结构体的成员都有值，当我们给一个结构体的成员变量设置初始值的时候，可以不用在调用初始化器的时候传参数给有值的变量。</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SJPerson</span> {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sex: <span class=\"type\">Bool</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">MemoryLayout</span>&lt;<span class=\"type\">SJPerson</span>&gt;.size)         <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">MemoryLayout</span>&lt;<span class=\"type\">SJPerson</span>&gt;.stride)       <span class=\"comment\">// 24</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">MemoryLayout</span>&lt;<span class=\"type\">SJPerson</span>&gt;.alignment)    <span class=\"comment\">// 8</span></span><br></pre></td></tr></tbody></table></figure>\n<p>打印其内存和对齐的字节数，在64位系统下，Int占8个字节，bool占一个字节，8+8+1=17，但因为内存对齐原则，系统会分配24字节来存储SJPerson</p>\n<h3 id=\"2、类-class\"><a href=\"#2、类-class\" class=\"headerlink\" title=\"2、类 class\"></a>2、类 class</h3><figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LGSSJTeacher</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age : <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"comment\">//struct可以不写初始化器</span></span><br><span class=\"line\">    <span class=\"comment\">//class 必须指定初始化器，当类成员没有初始值时</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>,<span class=\"params\">name</span>: <span class=\"type\">String</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> t <span class=\"operator\">=</span> <span class=\"type\">LGSSJTeacher</span>(age: <span class=\"number\">10</span>, name: <span class=\"string\">\"乔峰\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n<p>类是引用类型，意味着一个类类型的变量并不直接存储具体的实例对象，是对当前存储实例内存地址的引用，可以看出t和t1指向地址一致，本身不存储，自身的地址不一致</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#####t和t1 指向的地址一样</span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) p t<span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"type\">LGSwiftTest</span>.<span class=\"type\">LGSSJTeacher</span>) <span class=\"variable\">$R0</span> <span class=\"operator\">=</span> <span class=\"number\">0x0000000100576cc0</span> (age <span class=\"operator\">=</span> <span class=\"number\">20</span>, name <span class=\"operator\">=</span> <span class=\"string\">\"ssj\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) p t1<span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"type\">LGSwiftTest</span>.<span class=\"type\">LGSSJTeacher</span>) <span class=\"variable\">$R1</span> <span class=\"operator\">=</span> <span class=\"number\">0x0000000100576cc0</span> (age <span class=\"operator\">=</span> <span class=\"number\">20</span>, name <span class=\"operator\">=</span> <span class=\"string\">\"ssj\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) x<span class=\"operator\">/</span>8g <span class=\"number\">0x0000000100576cc0</span><span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x100576cc0</span>: <span class=\"number\">0x0000000100008180</span> <span class=\"number\">0x0000000600000003</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x100576cd0</span>: <span class=\"number\">0x0000000000000014</span> <span class=\"number\">0x00000000006a7373</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x100576ce0</span>: <span class=\"number\">0xe300000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x100576cf0</span>: <span class=\"number\">0x0000000000000050</span> <span class=\"number\">0x00000001c5c4c000</span></span><br><span class=\"line\">######t和t1 的地址不一样 两者相差<span class=\"number\">8</span>个字节</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) po <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>t1){<span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)}<span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span><span class=\"number\">0x0000000100008220</span><span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> elements</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">****</span>\\</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) po <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>t){<span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)}<span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span><span class=\"number\">0x0000000100008218</span><span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> elements</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"对象的堆空间申请过程\"><a href=\"#对象的堆空间申请过程\" class=\"headerlink\" title=\"对象的堆空间申请过程\"></a>对象的堆空间申请过程</h2><p>在Swift中，创建类对象需要向堆空间申请内存，大概流程如下</p>\n<ol>\n<li>class._allocating_init()</li>\n<li>libswiftCore.dylib:swift_allocObject</li>\n<li>libswiftCore.dylib:swift_slowAlloc</li>\n<li>libsystem_malloc.dylib:malloc<br>在Mac。iOS中的 <code>malloc</code>函数分配的内存大小总是16的倍数。</li>\n</ol>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LGPonit</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> y <span class=\"operator\">=</span> <span class=\"number\">18</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p <span class=\"operator\">=</span> <span class=\"type\">LGPonit</span>()</span><br><span class=\"line\"><span class=\"comment\">//class_getInstanceSize ： 返回类的实例大小</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_getInstanceSize(<span class=\"type\">LGPonit</span>.<span class=\"keyword\">self</span>))</span><br><span class=\"line\"><span class=\"comment\">//malloc_size 系统分配的内存大小</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(malloc_size(<span class=\"built_in\">unsafeBitCast</span>(p, to: <span class=\"type\">UnsafeRawPointer</span>.<span class=\"keyword\">self</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"end\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>可以看到，类大小40字节，系统分配48字节</li>\n<li>在类中 x是int占8个字节，y也是8个字节，test占一个（bool值），17个字节，但是类存储在堆空间中，前面需要8个字节存储类型信息，8个字节存储引用计数，33个字节，根据内存对齐（8字节对齐（4x8=32&lt;33,需要再分配一个8字节凑数）），所以5*8=40字节。</li>\n<li>因为上面所说，<code>malloc</code>函数分配的内存大小时16的倍数，所以最终系统分配了48字节给LGPoint。</li>\n</ul>\n<h2 id=\"类的初始化器\"><a href=\"#类的初始化器\" class=\"headerlink\" title=\"类的初始化器\"></a>类的初始化器</h2><p>1.指定初始化器 看上面的</p>\n<p>2.可失败初始化器</p>\n<p>当初始值不满足某个条件时，需要给初始化方法返回一个nil，可以在init后面接一个可选项？来修饰</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPerson</span> {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init?</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> age <span class=\"operator\">&lt;</span> <span class=\"number\">18</span> { <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>}</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 <span class=\"operator\">=</span> <span class=\"type\">SPerson</span>(age: <span class=\"number\">16</span>, name: <span class=\"string\">\"乔峰\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 <span class=\"operator\">=</span> <span class=\"type\">SPerson</span>(age: <span class=\"number\">18</span>, name: <span class=\"string\">\"虚竹\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"p1 - <span class=\"subst\">\\(String(describing: p1))</span>\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"p2 - <span class=\"subst\">\\(String(describing: p2))</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">打印结果：</span><br><span class=\"line\">p1 <span class=\"operator\">-</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">p2 <span class=\"operator\">-</span> <span class=\"type\">Optional</span>(_1_结构体与类.<span class=\"type\">SPerson</span>)</span><br></pre></td></tr></tbody></table></figure>\n<p>3.必要初始化器</p>\n<p>当初始化器器需要在init前面使用required修饰</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPerson</span> {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"comment\">// 父类定义必要实现初始化器</span></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SStudent</span>: <span class=\"title class_\">SPerson</span> {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> height: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">height</span>: <span class=\"type\">Int</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.height <span class=\"operator\">=</span> height</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(age: <span class=\"number\">18</span>, name: <span class=\"string\">\"乔峰\"</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 子类必须实现父类的必要初始化器</span></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) {</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">\"init(age:name:) has not been implemented\"</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>4.便捷初始化器</p>\n<p>为么可以为类提供一个便捷初始化器，需要在init前用convenience修饰</p>\n<p>如代码所示 便捷初始化器必须从相同的类里面调用另一个初始化器，并且最终必须调用一个指定初始化器</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPerson</span> {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>() {</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(age: <span class=\"number\">18</span>, name: <span class=\"string\">\"乔峰\"</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"二、Swift中编译流程\"><a href=\"#二、Swift中编译流程\" class=\"headerlink\" title=\"二、Swift中编译流程\"></a>二、Swift中编译流程</h1><h2 id=\"1-swift代码编译流程\"><a href=\"#1-swift代码编译流程\" class=\"headerlink\" title=\"1.swift代码编译流程\"></a>1.swift代码编译流程</h2><p> iOS不管是OC还是Swift，都是通过LLVM进行编译的，OC通clang编译器，编译成IR，然后再生成可执行文件.o(机器码)，swift则是通过Swift编译器编译出IR，然后再生成可执行文件.o<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8c1385531404205a83562359f6a3e2f~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChat786fb5f947ff1b9f3dadf7f38d9d6477.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87defffca10340599e195425be0bd72a~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChat32c482bd2a20e5b8f93d803441b9b383.png\"></p>\n<ul>\n<li>首先<code>swift Code</code> 经过 <code>-dump-parse</code> 进行语义分析解析成 <code>Parse</code>（抽象语法树）</li>\n<li><code>parse</code>经过-dump-ast 进行语义分析语法是否正确，是否安全</li>\n<li><code>sema</code> 之后会把 swift-code 降级变成<code>SILGen</code>（swift中间代码），对于SILGen又分为Raw SIL和经过优化的SIL opt Canonical SIL。</li>\n<li>优化完成的<code>SIL</code> 会由LLVM降级成为IR，降级之后由后端代码编译成机器码</li>\n</ul>\n<h3 id=\"编译命令\"><a href=\"#编译命令\" class=\"headerlink\" title=\"编译命令\"></a>编译命令</h3><figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分析输出AST</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>dump<span class=\"operator\">-</span>parse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分析并且检查类型输出AST</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>dump<span class=\"operator\">-</span>ast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成中间体语言（SIL），未优化</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>silgen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成中间体语言（SIL），优化后的</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>sil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成LLVM中间体语言 （.ll文件）</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>ir</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成LLVM中间体语言 （.bc文件）</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>bc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成汇编</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>assembly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编译生成可执行.out文件</span></span><br><span class=\"line\">swiftc <span class=\"operator\">-</span>o main.o main.swift</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"将代码编译成-sil-代码\"><a href=\"#将代码编译成-sil-代码\" class=\"headerlink\" title=\"将代码编译成 sil 代码\"></a>将代码编译成 sil 代码</h3><figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LGPonit</span>{</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> y <span class=\"operator\">=</span> <span class=\"number\">18</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p <span class=\"operator\">=</span> <span class=\"type\">LGPonit</span>()</span><br></pre></td></tr></tbody></table></figure>\n<p>终端 cd 到项目的 main.swift 目录，输入&nbsp;<code>swiftc main.swift -emit-sil</code>&nbsp;并按回车键，会在生成一个 main.sil 文件，并且会在终端输出 SIL 代码。 SIL 代码如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf393a7324b74b2595f7c5981c2df45a~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChat3a52e986915c40fa8621a51ce0ac2619.png\"><br>关于 SIL 的语法说明，其实也有相应的文档。这里贴上文档说明的地址：<a href=\"https://link.juejin.cn/?target=https://github.com/apple/swift/blob/main/docs/SIL.rst%23sil-stage\" title=\"https://github.com/apple/swift/blob/main/docs/SIL.rst#sil-stage\">SIL参考文档</a></p>\n<h3 id=\"汇编探索初始化流程\"><a href=\"#汇编探索初始化流程\" class=\"headerlink\" title=\"汇编探索初始化流程\"></a>汇编探索初始化流程</h3><p>通过汇编查看，SPerson 在进行初始化的时候，在底层会调用&nbsp;<code>__allocating_init</code>&nbsp;的函数，那么&nbsp;<code>__allocating_init</code>&nbsp;做了什么事情呢，跟进去看一下。</p>\n<p>让断点走到&nbsp;<code>__allocating_init</code>&nbsp;这一行代码，按住 control 键，点击这个向下的按钮。<br>可以看到，进入到 <code>__allocating_init</code> 的内部实现后，发现它会调用一个 <code>swift_allocObject</code> 函数，那么在继续跟汇编的时候跟丢了。</p>\n<p>接下来我们来看一下源码。源码可以去苹果官网下-<a href=\"https://link.juejin.cn/?target=https://github.com/apple/swift\" title=\"https://github.com/apple/swift\">swift源码下载地址</a>。用 VSCode 打开下载好的 swift 源码，全局搜索 <code>swift_allocObject</code> 这个函数。</p>\n<p>在 <code>HeapObject.cpp</code> 文件中找到 <code>swift_allocObject</code> 函数的实现，并且在 <code>swift_allocObject</code> 函数的实现上方，有一个 <code>_swift_allocObject_</code> 函数的实现。</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数，元数据。</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数，分配内存的大小</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数，内存对齐，值一般为 7，因为遵守8字节对齐</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">HeapObject</span> <span class=\"operator\">*</span>_swift_allocObject_(<span class=\"type\">HeapMetadata</span> const <span class=\"operator\">*</span>metadata,</span><br><span class=\"line\">                                    size_t requiredSize,</span><br><span class=\"line\">                                    size_t requiredAlignmentMask) {</span><br><span class=\"line\"><span class=\"built_in\">assert</span>(isAlignmentMask(requiredAlignmentMask));</span><br><span class=\"line\">auto object <span class=\"operator\">=</span> reinterpret_cast<span class=\"operator\">&lt;</span><span class=\"type\">HeapObject</span> <span class=\"operator\">*&gt;</span>(</span><br><span class=\"line\">   swift_slowAlloc(requiredSize, requiredAlignmentMask));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">NOTE:</span> this relies on the C++17 guaranteed semantics of no null-pointer</span></span><br><span class=\"line\"><span class=\"comment\">// check on the placement new allocator which we have observed on Windows,</span></span><br><span class=\"line\"><span class=\"comment\">// Linux, and macOS.</span></span><br><span class=\"line\">new (object) <span class=\"type\">HeapObject</span>(metadata);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If leak tracking is enabled, start tracking this object.</span></span><br><span class=\"line\"><span class=\"type\">SWIFT_LEAKS_START_TRACKING_OBJECT</span>(object);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">SWIFT_RT_TRACK_INVOCATION</span>(object, swift_allocObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> object;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>在函数的内部会调用一个&nbsp;<code>swift_slowAlloc</code>&nbsp;函数，我们来看下&nbsp;<code>swift_slowAlloc</code>&nbsp;函数的内部实现：</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void <span class=\"operator\">*</span>swift::swift_slowAlloc(size_t size, size_t alignMask) {</span><br><span class=\"line\">void <span class=\"operator\">*</span>p;</span><br><span class=\"line\"><span class=\"comment\">// This check also forces \"default\" alignment to use AlignedAlloc.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alignMask <span class=\"operator\">&lt;=</span> <span class=\"type\">MALLOC_ALIGN_MASK</span>) {</span><br><span class=\"line\"><span class=\"keyword\">#if</span> defined(__APPLE__)</span><br><span class=\"line\"> p <span class=\"operator\">=</span> malloc_zone_malloc(<span class=\"type\">DEFAULT_ZONE</span>(), size);</span><br><span class=\"line\"><span class=\"keyword\">#else</span></span><br><span class=\"line\"> p <span class=\"operator\">=</span> malloc(size);</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> size_t alignment <span class=\"operator\">=</span> (alignMask <span class=\"operator\">==</span> <span class=\"operator\">~</span>(size_t(<span class=\"number\">0</span>)))</span><br><span class=\"line\">                        <span class=\"operator\">?</span> _swift_MinAllocationAlignment</span><br><span class=\"line\">                        : alignMask <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"> p <span class=\"operator\">=</span> <span class=\"type\">AlignedAlloc</span>(size, alignment);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"operator\">!</span>p) swift::crash(<span class=\"string\">\"Could not allocate memory.\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> p;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>函数内部会调用一个swift——slowAlloc 函数，我们来看内部实现</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void <span class=\"operator\">*</span>swift::swift_slowAlloc(size_t size, size_t alignMask) {</span><br><span class=\"line\">void <span class=\"operator\">*</span>p;</span><br><span class=\"line\"><span class=\"comment\">// This check also forces \"default\" alignment to use AlignedAlloc.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alignMask <span class=\"operator\">&lt;=</span> <span class=\"type\">MALLOC_ALIGN_MASK</span>) {</span><br><span class=\"line\"><span class=\"keyword\">#if</span> defined(__APPLE__)</span><br><span class=\"line\"> p <span class=\"operator\">=</span> malloc_zone_malloc(<span class=\"type\">DEFAULT_ZONE</span>(), size);</span><br><span class=\"line\"><span class=\"keyword\">#else</span></span><br><span class=\"line\"> p <span class=\"operator\">=</span> malloc(size);</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"> size_t alignment <span class=\"operator\">=</span> (alignMask <span class=\"operator\">==</span> <span class=\"operator\">~</span>(size_t(<span class=\"number\">0</span>)))</span><br><span class=\"line\">                        <span class=\"operator\">?</span> _swift_MinAllocationAlignment</span><br><span class=\"line\">                        : alignMask <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"> p <span class=\"operator\">=</span> <span class=\"type\">AlignedAlloc</span>(size, alignment);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"operator\">!</span>p) swift::crash(<span class=\"string\">\"Could not allocate memory.\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> p;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><code>swift_slowAlloc</code>&nbsp;函数的内部是去进行一些分配内存的操作，比如&nbsp;<code>malloc</code>。所以就印证了类对象实例引用类型-&gt;对象申请堆空间的过程。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"highlight-a11y-dark\"><a href=\"#highlight-a11y-dark\" class=\"headerlink\" title=\"highlight: a11y-dark\"></a>highlight: a11y-dark</h2><h1 id=\"一、Swift中的类型\"><a href=\"#一、Swift中的类型\" class=\"headerlink\" title=\"一、Swift中的类型\"></a>一、Swift中的类型</h1><p>Swfit中重要的两种类型 ：<strong>类类型</strong> 、<strong>结构体类型</strong></p>\n<p>结构体和类相同点：</p>\n<ol>\n<li>定义存储值的属性</li>\n<li>定义方法</li>\n<li>定义下标及下标语法提供对其值的访问</li>\n<li>定义初始化器</li>\n<li>使用extension来拓展功能</li>\n<li>遵循协议来提供某种功能<br>结构体和类不同点：</li>\n<li>类有继承的特性，而结构体没有</li>\n<li>类型转换使我们能在运行时检查和解释实例的类型</li>\n<li>类有析构函数来释放其分配的资源</li>\n<li>引用计数允许一个类实例有多个引用<br>5，类是引用类型，结构体是值类型，引用类型就相当于在线的 Excel ，当我们把这个链接共享给别人的时候，别人的修改我们 是能够看到的;值类型就相当于本地的 Excel ,当我们把本地的 Excel 传递给别人的时候，就 相当于重新复制了一份给别人，至于他们对于内容的修改我们是无法感知的。</li>\n</ol>\n<p>6.引用类型和值类型还有一个最直观的区别就是存储的位置不同:一般情况，值类型存储的在<br> 栈上，引用类型存储在堆上。</p>\n<h1 id=\"Tips：内存区域\"><a href=\"#Tips：内存区域\" class=\"headerlink\" title=\"Tips：内存区域\"></a>Tips：内存区域</h1><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21b647805389408e839f7c58a717a733~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChata9d08c0e3940ed090c00fbc6a5b6938f.png\"><br>栈区（<code>stack</code>）：局部变量和函数运行过程中的上下文</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>()&#123;<span class=\"comment\">//test就是个函数</span></span><br><span class=\"line\"><span class=\"comment\">//在函数内部声明的age变量就是一个局部变量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> age : <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(age)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>堆区（<code>Heap</code>）：存储所有对象;</p>\n<p><code>Global</code> ：存储全局变量，常量，代码区;</p>\n<p><code>Segment&amp;Section</code>:Mach-O文件有多个段（Segment），每个段都有不同的功能。每个段又分为很多小的<code>Section</code></p>\n<ul>\n<li>TEXT.text    : 机器码</li>\n<li>TEXT.cstring : 硬编码的字符串</li>\n<li>TEXT.const   : 初始化过的常量</li>\n<li>DATA.data    : 初始化过的可变（静态&#x2F;全局）数据</li>\n<li>DATA.const   : 没有初始化的常量</li>\n<li>DATA.bss     : 没有初始化的（静态&#x2F;全局）变量</li>\n<li>DATA.common  : 没有初始化的符号声明</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09ef978df92148418b3d1608ed016c88~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h3 id=\"1-结构体-struct\"><a href=\"#1-结构体-struct\" class=\"headerlink\" title=\"1. 结构体 struct\"></a>1. 结构体 struct</h3><ol>\n<li>定义一个结构体</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LGSSJTeacher</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age : <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"comment\">//struct可以不写初始化器</span></span><br><span class=\"line\"><span class=\"comment\">//    init(age: Int,name: String) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        self.age = age</span></span><br><span class=\"line\"><span class=\"comment\">//        self.name = name</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> t <span class=\"operator\">=</span> <span class=\"type\">LGSSJTeacher</span>(age: <span class=\"number\">10</span>, name: <span class=\"string\">&quot;乔帮主&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>结构体会默认生成一个初始化器，一旦在定义结构体时自定义初始化器，就不会默认生成其他初始化器。<br>对结构体进行初始化的时候，必须保证结构体的成员都有值，当我们给一个结构体的成员变量设置初始值的时候，可以不用在调用初始化器的时候传参数给有值的变量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SJPerson</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> weight: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> sex: <span class=\"type\">Bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">MemoryLayout</span>&lt;<span class=\"type\">SJPerson</span>&gt;.size)         <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">MemoryLayout</span>&lt;<span class=\"type\">SJPerson</span>&gt;.stride)       <span class=\"comment\">// 24</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"type\">MemoryLayout</span>&lt;<span class=\"type\">SJPerson</span>&gt;.alignment)    <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n<p>打印其内存和对齐的字节数，在64位系统下，Int占8个字节，bool占一个字节，8+8+1&#x3D;17，但因为内存对齐原则，系统会分配24字节来存储SJPerson</p>\n<h3 id=\"2、类-class\"><a href=\"#2、类-class\" class=\"headerlink\" title=\"2、类 class\"></a>2、类 class</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LGSSJTeacher</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age : <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"comment\">//struct可以不写初始化器</span></span><br><span class=\"line\">    <span class=\"comment\">//class 必须指定初始化器，当类成员没有初始值时</span></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>,<span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> t <span class=\"operator\">=</span> <span class=\"type\">LGSSJTeacher</span>(age: <span class=\"number\">10</span>, name: <span class=\"string\">&quot;乔峰&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>类是引用类型，意味着一个类类型的变量并不直接存储具体的实例对象，是对当前存储实例内存地址的引用，可以看出t和t1指向地址一致，本身不存储，自身的地址不一致</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#####t和t1 指向的地址一样</span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) p t<span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"type\">LGSwiftTest</span>.<span class=\"type\">LGSSJTeacher</span>) <span class=\"variable\">$R0</span> <span class=\"operator\">=</span> <span class=\"number\">0x0000000100576cc0</span> (age <span class=\"operator\">=</span> <span class=\"number\">20</span>, name <span class=\"operator\">=</span> <span class=\"string\">&quot;ssj&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) p t1<span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"type\">LGSwiftTest</span>.<span class=\"type\">LGSSJTeacher</span>) <span class=\"variable\">$R1</span> <span class=\"operator\">=</span> <span class=\"number\">0x0000000100576cc0</span> (age <span class=\"operator\">=</span> <span class=\"number\">20</span>, name <span class=\"operator\">=</span> <span class=\"string\">&quot;ssj&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) x<span class=\"operator\">/</span>8g <span class=\"number\">0x0000000100576cc0</span><span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x100576cc0</span>: <span class=\"number\">0x0000000100008180</span> <span class=\"number\">0x0000000600000003</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x100576cd0</span>: <span class=\"number\">0x0000000000000014</span> <span class=\"number\">0x00000000006a7373</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x100576ce0</span>: <span class=\"number\">0xe300000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0x100576cf0</span>: <span class=\"number\">0x0000000000000050</span> <span class=\"number\">0x00000001c5c4c000</span></span><br><span class=\"line\">######t和t1 的地址不一样 两者相差<span class=\"number\">8</span>个字节</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) po <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>t1)&#123;<span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)&#125;<span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span><span class=\"number\">0x0000000100008220</span><span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> elements</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">****</span>\\</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span>(lldb) po <span class=\"built_in\">withUnsafePointer</span>(to: <span class=\"operator\">&amp;</span>t)&#123;<span class=\"built_in\">print</span>(<span class=\"variable\">$0</span>)&#125;<span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span><span class=\"number\">0x0000000100008218</span><span class=\"operator\">**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> elements</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象的堆空间申请过程\"><a href=\"#对象的堆空间申请过程\" class=\"headerlink\" title=\"对象的堆空间申请过程\"></a>对象的堆空间申请过程</h2><p>在Swift中，创建类对象需要向堆空间申请内存，大概流程如下</p>\n<ol>\n<li>class._allocating_init()</li>\n<li>libswiftCore.dylib:swift_allocObject</li>\n<li>libswiftCore.dylib:swift_slowAlloc</li>\n<li>libsystem_malloc.dylib:malloc<br>在Mac。iOS中的 <code>malloc</code>函数分配的内存大小总是16的倍数。</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LGPonit</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> y <span class=\"operator\">=</span> <span class=\"number\">18</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p <span class=\"operator\">=</span> <span class=\"type\">LGPonit</span>()</span><br><span class=\"line\"><span class=\"comment\">//class_getInstanceSize ： 返回类的实例大小</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(class_getInstanceSize(<span class=\"type\">LGPonit</span>.<span class=\"keyword\">self</span>))</span><br><span class=\"line\"><span class=\"comment\">//malloc_size 系统分配的内存大小</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(malloc_size(<span class=\"built_in\">unsafeBitCast</span>(p, to: <span class=\"type\">UnsafeRawPointer</span>.<span class=\"keyword\">self</span>)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以看到，类大小40字节，系统分配48字节</li>\n<li>在类中 x是int占8个字节，y也是8个字节，test占一个（bool值），17个字节，但是类存储在堆空间中，前面需要8个字节存储类型信息，8个字节存储引用计数，33个字节，根据内存对齐（8字节对齐（4x8&#x3D;32&lt;33,需要再分配一个8字节凑数）），所以5*8&#x3D;40字节。</li>\n<li>因为上面所说，<code>malloc</code>函数分配的内存大小时16的倍数，所以最终系统分配了48字节给LGPoint。</li>\n</ul>\n<h2 id=\"类的初始化器\"><a href=\"#类的初始化器\" class=\"headerlink\" title=\"类的初始化器\"></a>类的初始化器</h2><p>1.指定初始化器 看上面的</p>\n<p>2.可失败初始化器</p>\n<p>当初始值不满足某个条件时，需要给初始化方法返回一个nil，可以在init后面接一个可选项？来修饰</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPerson</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init?</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> age <span class=\"operator\">&lt;</span> <span class=\"number\">18</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>&#125;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 <span class=\"operator\">=</span> <span class=\"type\">SPerson</span>(age: <span class=\"number\">16</span>, name: <span class=\"string\">&quot;乔峰&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 <span class=\"operator\">=</span> <span class=\"type\">SPerson</span>(age: <span class=\"number\">18</span>, name: <span class=\"string\">&quot;虚竹&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;p1 - <span class=\"subst\">\\(String(describing: p1))</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;p2 - <span class=\"subst\">\\(String(describing: p2))</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">打印结果：</span><br><span class=\"line\">p1 <span class=\"operator\">-</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">p2 <span class=\"operator\">-</span> <span class=\"type\">Optional</span>(_1_结构体与类.<span class=\"type\">SPerson</span>)</span><br></pre></td></tr></table></figure>\n<p>3.必要初始化器</p>\n<p>当初始化器器需要在init前面使用required修饰</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPerson</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">    <span class=\"comment\">// 父类定义必要实现初始化器</span></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SStudent</span>: <span class=\"title class_\">SPerson</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> height: <span class=\"type\">Int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">height</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.height <span class=\"operator\">=</span> height</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(age: <span class=\"number\">18</span>, name: <span class=\"string\">&quot;乔峰&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 子类必须实现父类的必要初始化器</span></span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fatalError</span>(<span class=\"string\">&quot;init(age:name:) has not been implemented&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>4.便捷初始化器</p>\n<p>为么可以为类提供一个便捷初始化器，需要在init前用convenience修饰</p>\n<p>如代码所示 便捷初始化器必须从相同的类里面调用另一个初始化器，并且最终必须调用一个指定初始化器</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SPerson</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>(<span class=\"params\">age</span>: <span class=\"type\">Int</span>, <span class=\"params\">name</span>: <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.age <span class=\"operator\">=</span> age</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name <span class=\"operator\">=</span> name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(age: <span class=\"number\">18</span>, name: <span class=\"string\">&quot;乔峰&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"二、Swift中编译流程\"><a href=\"#二、Swift中编译流程\" class=\"headerlink\" title=\"二、Swift中编译流程\"></a>二、Swift中编译流程</h1><h2 id=\"1-swift代码编译流程\"><a href=\"#1-swift代码编译流程\" class=\"headerlink\" title=\"1.swift代码编译流程\"></a>1.swift代码编译流程</h2><p> iOS不管是OC还是Swift，都是通过LLVM进行编译的，OC通clang编译器，编译成IR，然后再生成可执行文件.o(机器码)，swift则是通过Swift编译器编译出IR，然后再生成可执行文件.o<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8c1385531404205a83562359f6a3e2f~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChat786fb5f947ff1b9f3dadf7f38d9d6477.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87defffca10340599e195425be0bd72a~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChat32c482bd2a20e5b8f93d803441b9b383.png\"></p>\n<ul>\n<li>首先<code>swift Code</code> 经过 <code>-dump-parse</code> 进行语义分析解析成 <code>Parse</code>（抽象语法树）</li>\n<li><code>parse</code>经过-dump-ast 进行语义分析语法是否正确，是否安全</li>\n<li><code>sema</code> 之后会把 swift-code 降级变成<code>SILGen</code>（swift中间代码），对于SILGen又分为Raw SIL和经过优化的SIL opt Canonical SIL。</li>\n<li>优化完成的<code>SIL</code> 会由LLVM降级成为IR，降级之后由后端代码编译成机器码</li>\n</ul>\n<h3 id=\"编译命令\"><a href=\"#编译命令\" class=\"headerlink\" title=\"编译命令\"></a>编译命令</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分析输出AST</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>dump<span class=\"operator\">-</span>parse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分析并且检查类型输出AST</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>dump<span class=\"operator\">-</span>ast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成中间体语言（SIL），未优化</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>silgen</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成中间体语言（SIL），优化后的</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>sil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成LLVM中间体语言 （.ll文件）</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>ir</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成LLVM中间体语言 （.bc文件）</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>bc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成汇编</span></span><br><span class=\"line\">swiftc main.swift <span class=\"operator\">-</span>emit<span class=\"operator\">-</span>assembly</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编译生成可执行.out文件</span></span><br><span class=\"line\">swiftc <span class=\"operator\">-</span>o main.o main.swift</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"将代码编译成-sil-代码\"><a href=\"#将代码编译成-sil-代码\" class=\"headerlink\" title=\"将代码编译成 sil 代码\"></a>将代码编译成 sil 代码</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LGPonit</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> y <span class=\"operator\">=</span> <span class=\"number\">18</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> test <span class=\"operator\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p <span class=\"operator\">=</span> <span class=\"type\">LGPonit</span>()</span><br></pre></td></tr></table></figure>\n<p>终端 cd 到项目的 main.swift 目录，输入 <code>swiftc main.swift -emit-sil</code> 并按回车键，会在生成一个 main.sil 文件，并且会在终端输出 SIL 代码。 SIL 代码如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf393a7324b74b2595f7c5981c2df45a~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChat3a52e986915c40fa8621a51ce0ac2619.png\"><br>关于 SIL 的语法说明，其实也有相应的文档。这里贴上文档说明的地址：<a href=\"https://link.juejin.cn/?target=https://github.com/apple/swift/blob/main/docs/SIL.rst%23sil-stage\" title=\"https://github.com/apple/swift/blob/main/docs/SIL.rst#sil-stage\">SIL参考文档</a></p>\n<h3 id=\"汇编探索初始化流程\"><a href=\"#汇编探索初始化流程\" class=\"headerlink\" title=\"汇编探索初始化流程\"></a>汇编探索初始化流程</h3><p>通过汇编查看，SPerson 在进行初始化的时候，在底层会调用 <code>__allocating_init</code> 的函数，那么 <code>__allocating_init</code> 做了什么事情呢，跟进去看一下。</p>\n<p>让断点走到 <code>__allocating_init</code> 这一行代码，按住 control 键，点击这个向下的按钮。<br>可以看到，进入到 <code>__allocating_init</code> 的内部实现后，发现它会调用一个 <code>swift_allocObject</code> 函数，那么在继续跟汇编的时候跟丢了。</p>\n<p>接下来我们来看一下源码。源码可以去苹果官网下-<a href=\"https://link.juejin.cn/?target=https://github.com/apple/swift\" title=\"https://github.com/apple/swift\">swift源码下载地址</a>。用 VSCode 打开下载好的 swift 源码，全局搜索 <code>swift_allocObject</code> 这个函数。</p>\n<p>在 <code>HeapObject.cpp</code> 文件中找到 <code>swift_allocObject</code> 函数的实现，并且在 <code>swift_allocObject</code> 函数的实现上方，有一个 <code>_swift_allocObject_</code> 函数的实现。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数，元数据。</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数，分配内存的大小</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数，内存对齐，值一般为 7，因为遵守8字节对齐</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">HeapObject</span> <span class=\"operator\">*</span>_swift_allocObject_(<span class=\"type\">HeapMetadata</span> const <span class=\"operator\">*</span>metadata,</span><br><span class=\"line\">                                    size_t requiredSize,</span><br><span class=\"line\">                                    size_t requiredAlignmentMask) &#123;</span><br><span class=\"line\"><span class=\"built_in\">assert</span>(isAlignmentMask(requiredAlignmentMask));</span><br><span class=\"line\">auto object <span class=\"operator\">=</span> reinterpret_cast<span class=\"operator\">&lt;</span><span class=\"type\">HeapObject</span> <span class=\"operator\">*&gt;</span>(</span><br><span class=\"line\">   swift_slowAlloc(requiredSize, requiredAlignmentMask));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">NOTE:</span> this relies on the C++17 guaranteed semantics of no null-pointer</span></span><br><span class=\"line\"><span class=\"comment\">// check on the placement new allocator which we have observed on Windows,</span></span><br><span class=\"line\"><span class=\"comment\">// Linux, and macOS.</span></span><br><span class=\"line\">new (object) <span class=\"type\">HeapObject</span>(metadata);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If leak tracking is enabled, start tracking this object.</span></span><br><span class=\"line\"><span class=\"type\">SWIFT_LEAKS_START_TRACKING_OBJECT</span>(object);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">SWIFT_RT_TRACK_INVOCATION</span>(object, swift_allocObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在函数的内部会调用一个 <code>swift_slowAlloc</code> 函数，我们来看下 <code>swift_slowAlloc</code> 函数的内部实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void <span class=\"operator\">*</span>swift::swift_slowAlloc(size_t size, size_t alignMask) &#123;</span><br><span class=\"line\">void <span class=\"operator\">*</span>p;</span><br><span class=\"line\"><span class=\"comment\">// This check also forces &quot;default&quot; alignment to use AlignedAlloc.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alignMask <span class=\"operator\">&lt;=</span> <span class=\"type\">MALLOC_ALIGN_MASK</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">#if</span> defined(__APPLE__)</span><br><span class=\"line\"> p <span class=\"operator\">=</span> malloc_zone_malloc(<span class=\"type\">DEFAULT_ZONE</span>(), size);</span><br><span class=\"line\"><span class=\"keyword\">#else</span></span><br><span class=\"line\"> p <span class=\"operator\">=</span> malloc(size);</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"> size_t alignment <span class=\"operator\">=</span> (alignMask <span class=\"operator\">==</span> <span class=\"operator\">~</span>(size_t(<span class=\"number\">0</span>)))</span><br><span class=\"line\">                        <span class=\"operator\">?</span> _swift_MinAllocationAlignment</span><br><span class=\"line\">                        : alignMask <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"> p <span class=\"operator\">=</span> <span class=\"type\">AlignedAlloc</span>(size, alignment);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"operator\">!</span>p) swift::crash(<span class=\"string\">&quot;Could not allocate memory.&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>函数内部会调用一个swift——slowAlloc 函数，我们来看内部实现</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void <span class=\"operator\">*</span>swift::swift_slowAlloc(size_t size, size_t alignMask) &#123;</span><br><span class=\"line\">void <span class=\"operator\">*</span>p;</span><br><span class=\"line\"><span class=\"comment\">// This check also forces &quot;default&quot; alignment to use AlignedAlloc.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alignMask <span class=\"operator\">&lt;=</span> <span class=\"type\">MALLOC_ALIGN_MASK</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">#if</span> defined(__APPLE__)</span><br><span class=\"line\"> p <span class=\"operator\">=</span> malloc_zone_malloc(<span class=\"type\">DEFAULT_ZONE</span>(), size);</span><br><span class=\"line\"><span class=\"keyword\">#else</span></span><br><span class=\"line\"> p <span class=\"operator\">=</span> malloc(size);</span><br><span class=\"line\"><span class=\"keyword\">#endif</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"> size_t alignment <span class=\"operator\">=</span> (alignMask <span class=\"operator\">==</span> <span class=\"operator\">~</span>(size_t(<span class=\"number\">0</span>)))</span><br><span class=\"line\">                        <span class=\"operator\">?</span> _swift_MinAllocationAlignment</span><br><span class=\"line\">                        : alignMask <span class=\"operator\">+</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"> p <span class=\"operator\">=</span> <span class=\"type\">AlignedAlloc</span>(size, alignment);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"operator\">!</span>p) swift::crash(<span class=\"string\">&quot;Could not allocate memory.&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>swift_slowAlloc</code> 函数的内部是去进行一些分配内存的操作，比如 <code>malloc</code>。所以就印证了类对象实例引用类型-&gt;对象申请堆空间的过程。</p>\n"},{"title":"markdown语法吃灰录","date":"2022-08-31T03:04:13.000Z","_content":"### 主要特性\n\n- 支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；\n- 支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；\n- 支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；\n- 支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;\n- 支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；\n- 支持 AMD / CMD 模块化加载（支持 Require.js & Sea.js），并且支持自定义扩展插件；\n- 兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；\n- 支持自定义主题样式；\n\n# Editor.md\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n                \n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n                    \n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id] \n\n[anchor-id]: http://www.this-anchor-link.com/\n\nGFM a-tail link @pandao\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似`<pre>`预格式化文本(Preformatted Text)的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n    \n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test(){\n\tconsole.log(\"Hello world!\");\n}\n \n(function(){\n    var box = function(){\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log('box.init()');\n\n\t\t\treturn this;\n        },\n\n\t\tadd : function(str){\n\t\t\talert(\"add\", str);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremove : function(str){\n\t\t\talert(\"remove\", str);\n\n\t\t\treturn this;\n\t\t}\n    };\n    \n    box.fn.init.prototype = box.fn;\n    \n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <title>Hello world!</title>\n    </head>\n    <body>\n        <h1>Hello world!</h1>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/examples/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n                \n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n                \n- 列表一\n- 列表二\n- 列表三\n     \n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n                \n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n                \n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n                \n----\n                    \n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n                    \nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell \n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n                \n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n \n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n            \n### 科学公式 TeX(KaTeX)\n                    \n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n                    \n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle \n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        } \n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n                \n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n                    \n### 绘制序列图 Sequence Diagram\n                    \n```seq\nAndrew->China: Says Hello \nNote right of China: China thinks\\nabout it \nChina-->Andrew: How are you? \nAndrew->>China: I am good thanks!\n```\n\n### End\n","source":"_posts/test-blog.md","raw":"---\ntitle: markdown语法吃灰录\ndate: 2022-08-31 11:04:13\ntags:\n---\n### 主要特性\n\n- 支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；\n- 支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；\n- 支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；\n- 支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;\n- 支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；\n- 支持 AMD / CMD 模块化加载（支持 Require.js & Sea.js），并且支持自定义扩展插件；\n- 兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；\n- 支持自定义主题样式；\n\n# Editor.md\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n                \n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n                    \n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id] \n\n[anchor-id]: http://www.this-anchor-link.com/\n\nGFM a-tail link @pandao\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似`<pre>`预格式化文本(Preformatted Text)的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n    \n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test(){\n\tconsole.log(\"Hello world!\");\n}\n \n(function(){\n    var box = function(){\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log('box.init()');\n\n\t\t\treturn this;\n        },\n\n\t\tadd : function(str){\n\t\t\talert(\"add\", str);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremove : function(str){\n\t\t\talert(\"remove\", str);\n\n\t\t\treturn this;\n\t\t}\n    };\n    \n    box.fn.init.prototype = box.fn;\n    \n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <title>Hello world!</title>\n    </head>\n    <body>\n        <h1>Hello world!</h1>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/examples/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n                \n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n                \n- 列表一\n- 列表二\n- 列表三\n     \n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n                \n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n                \n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n                \n----\n                    \n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n                    \nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell \n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n                \n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n \n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n            \n### 科学公式 TeX(KaTeX)\n                    \n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n                    \n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle \n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        } \n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n                \n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n                    \n### 绘制序列图 Sequence Diagram\n                    \n```seq\nAndrew->China: Says Hello \nNote right of China: China thinks\\nabout it \nChina-->Andrew: How are you? \nAndrew->>China: I am good thanks!\n```\n\n### End\n","slug":"test-blog","published":1,"updated":"2022-08-31T08:44:22.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7jrxzhb0001qautex1b9fe2","content":"<h3 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h3><ul>\n<li>支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；</li>\n<li>支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；</li>\n<li>支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；</li>\n<li>支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;</li>\n<li>支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；</li>\n<li>支持 AMD / CMD 模块化加载（支持 Require.js &amp; Sea.js），并且支持自定义扩展插件；</li>\n<li>兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；</li>\n<li>支持自定义主题样式；</li>\n</ul>\n<h1 id=\"Editor-md\"><a href=\"#Editor-md\" class=\"headerlink\" title=\"Editor.md\"></a>Editor.md</h1><p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<p>[TOCM]</p>\n<p>[TOC]</p>\n<h1 id=\"Heading-1\"><a href=\"#Heading-1\" class=\"headerlink\" title=\"Heading 1\"></a>Heading 1</h1><h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><h3 id=\"Heading-3\"><a href=\"#Heading-3\" class=\"headerlink\" title=\"Heading 3\"></a>Heading 3</h3><h4 id=\"Heading-4\"><a href=\"#Heading-4\" class=\"headerlink\" title=\"Heading 4\"></a>Heading 4</h4><h5 id=\"Heading-5\"><a href=\"#Heading-5\" class=\"headerlink\" title=\"Heading 5\"></a>Heading 5</h5><h6 id=\"Heading-6\"><a href=\"#Heading-6\" class=\"headerlink\" title=\"Heading 6\"></a>Heading 6</h6><h1 id=\"Heading-1-link-Heading-link\"><a href=\"#Heading-1-link-Heading-link\" class=\"headerlink\" title=\"Heading 1 link Heading link\"></a>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h1><h2 id=\"Heading-2-link-Heading-link\"><a href=\"#Heading-2-link-Heading-link\" class=\"headerlink\" title=\"Heading 2 link Heading link\"></a>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h2><h3 id=\"Heading-3-link-Heading-link\"><a href=\"#Heading-3-link-Heading-link\" class=\"headerlink\" title=\"Heading 3 link Heading link\"></a>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h3><h4 id=\"Heading-4-link-Heading-link-Heading-link-Heading-link\"><a href=\"#Heading-4-link-Heading-link-Heading-link-Heading-link\" class=\"headerlink\" title=\"Heading 4 link Heading link Heading link Heading link\"></a>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h4><h5 id=\"Heading-5-link-Heading-link\"><a href=\"#Heading-5-link-Heading-link\" class=\"headerlink\" title=\"Heading 5 link Heading link\"></a>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h5><h6 id=\"Heading-6-link-Heading-link\"><a href=\"#Heading-6-link-Heading-link\" class=\"headerlink\" title=\"Heading 6 link Heading link\"></a>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h6><h4 id=\"标题（用底线的形式）Heading-underline\"><a href=\"#标题（用底线的形式）Heading-underline\" class=\"headerlink\" title=\"标题（用底线的形式）Heading (underline)\"></a>标题（用底线的形式）Heading (underline)</h4><h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><h3 id=\"字符效果和横线等\"><a href=\"#字符效果和横线等\" class=\"headerlink\" title=\"字符效果和横线等\"></a>字符效果和横线等</h3><hr>\n<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><em><strong>粗斜体</strong></em> <em><strong>粗斜体</strong></em></p>\n<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p>\n<h3 id=\"引用-Blockquotes\"><a href=\"#引用-Blockquotes\" class=\"headerlink\" title=\"引用 Blockquotes\"></a>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"锚点与链接-Links\"><a href=\"#锚点与链接-Links\" class=\"headerlink\" title=\"锚点与链接 Links\"></a>锚点与链接 Links</h3><p><a href=\"http://localhost/\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com/\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\">锚点链接</a> </p>\n<p>GFM a-tail link @pandao</p>\n<blockquote>\n<p>@pandao</p>\n</blockquote>\n<h3 id=\"多语言代码高亮-Codes\"><a href=\"#多语言代码高亮-Codes\" class=\"headerlink\" title=\"多语言代码高亮 Codes\"></a>多语言代码高亮 Codes</h3><h4 id=\"行内代码-Inline-code\"><a href=\"#行内代码-Inline-code\" class=\"headerlink\" title=\"行内代码 Inline code\"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"缩进风格\"><a href=\"#缩进风格\" class=\"headerlink\" title=\"缩进风格\"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似<code>&lt;pre&gt;</code>预格式化文本(Preformatted Text)的功能。</p>\n<pre><code>&lt;?php\n    echo \"Hello world!\";\n?&gt;\n</code></pre>\n<p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre>\n<h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码\"></a>JS代码</h4><figure class=\"highlight javascript\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>){</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"Hello world!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"> </span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>){</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"keyword\">function</span>(<span class=\"params\"></span>){</span><br><span class=\"line\">        <span class=\"keyword\">return</span> box.<span class=\"property\">fn</span>.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">    };</span><br><span class=\"line\"></span><br><span class=\"line\">    box.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = box.<span class=\"property\">fn</span> = {</span><br><span class=\"line\">        init : <span class=\"keyword\">function</span>(<span class=\"params\"></span>){</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">'box.init()'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        },</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tadd : <span class=\"keyword\">function</span>(<span class=\"params\">str</span>){</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">alert</span>(<span class=\"string\">\"add\"</span>, str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">\t\t},</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tremove : <span class=\"keyword\">function</span>(<span class=\"params\">str</span>){</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">alert</span>(<span class=\"string\">\"remove\"</span>, str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">    };</span><br><span class=\"line\">    </span><br><span class=\"line\">    box.<span class=\"property\">fn</span>.<span class=\"property\">init</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = box.<span class=\"property\">fn</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">box</span> =box;</span><br><span class=\"line\">})();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testBox = <span class=\"title function_\">box</span>();</span><br><span class=\"line\">testBox.<span class=\"title function_\">add</span>(<span class=\"string\">\"jQuery\"</span>).<span class=\"title function_\">remove</span>(<span class=\"string\">\"jQuery\"</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"HTML代码-HTML-codes\"><a href=\"#HTML代码-HTML-codes\" class=\"headerlink\" title=\"HTML代码 HTML codes\"></a>HTML代码 HTML codes</h4><figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">charest</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"图片-Images\"><a href=\"#图片-Images\" class=\"headerlink\" title=\"图片 Images\"></a>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/examples/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"列表-Lists\"><a href=\"#列表-Lists\" class=\"headerlink\" title=\"列表 Lists\"></a>列表 Lists</h3><h4 id=\"无序列表（减号）Unordered-Lists\"><a href=\"#无序列表（减号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（减号）Unordered Lists (-)\"></a>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（星号）Unordered-Lists\"><a href=\"#无序列表（星号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（星号）Unordered Lists (*)\"></a>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（加号和嵌套）Unordered-Lists\"><a href=\"#无序列表（加号和嵌套）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（加号和嵌套）Unordered Lists (+)\"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li>\n<li>列表二<ul>\n<li>列表二-1</li>\n<li>列表二-2</li>\n<li>列表二-3</li>\n</ul>\n</li>\n<li>列表三<ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有序列表-Ordered-Lists\"><a href=\"#有序列表-Ordered-Lists\" class=\"headerlink\" title=\"有序列表 Ordered Lists (-)\"></a>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li>\n<li>第二行</li>\n<li>第三行</li>\n</ol>\n<h4 id=\"GFM-task-list\"><a href=\"#GFM-task-list\" class=\"headerlink\" title=\"GFM task list\"></a>GFM task list</h4><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GFM task list 1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GFM task list 2</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-1</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-2</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-3</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4-1</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4-2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"绘制表格-Tables\"><a href=\"#绘制表格-Tables\" class=\"headerlink\" title=\"绘制表格 Tables\"></a>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Left-Aligned</th>\n<th align=\"center\">Center Aligned</th>\n<th align=\"right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">col 3 is</td>\n<td align=\"center\">some wordy text</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td align=\"left\">col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td align=\"left\">zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th align=\"right\">Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Computer</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"特殊符号-HTML-Entities-Codes\"><a href=\"#特殊符号-HTML-Entities-Codes\" class=\"headerlink\" title=\"特殊符号 HTML Entities Codes\"></a>特殊符号 HTML Entities Codes</h4><p>&amp;copy; &amp;  &amp;uml; &amp;trade; &amp;iexcl; &amp;pound;<br>&amp; &lt; &gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot; </p>\n<p>X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14;  &amp;times;  &amp;divide;   &amp;raquo;</p>\n<p>18&amp;ordm;C  \"  &amp;apos;</p>\n<h3 id=\"Emoji表情-smiley\"><a href=\"#Emoji表情-smiley\" class=\"headerlink\" title=\"Emoji表情 :smiley:\"></a>Emoji表情 <span class=\"github-emoji\"><span>😃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span></h3><blockquote>\n<p>Blockquotes <span class=\"github-emoji\"><span>⭐</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span></p>\n</blockquote>\n<h4 id=\"GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\"><a href=\"#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\" class=\"headerlink\" title=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <span class=\"github-emoji\"><span>😃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> @mentions, <span class=\"github-emoji\"><span>😃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> [ ] <span class=\"github-emoji\"><span>😃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> this is a complete item <span class=\"github-emoji\"><span>😃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span>;</li>\n<li><input disabled=\"\" type=\"checkbox\"> []this is an incomplete item <a href=\"#\">test link</a> :fa-star: @pandao; </li>\n<li><input disabled=\"\" type=\"checkbox\"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <span class=\"github-emoji\"><span>😃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> this is an incomplete item <a href=\"#\">test link</a> :fa-star: :fa-gear:;</li>\n<li><input disabled=\"\" type=\"checkbox\"> <span class=\"github-emoji\"><span>😃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> this is  :fa-star: :fa-gear: an incomplete item <a href=\"#\">test link</a>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反斜杠-Escape\"><a href=\"#反斜杠-Escape\" class=\"headerlink\" title=\"反斜杠 Escape\"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<h3 id=\"科学公式-TeX-KaTeX\"><a href=\"#科学公式-TeX-KaTeX\" class=\"headerlink\" title=\"科学公式 TeX(KaTeX)\"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>\n<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>\n<p>$$(\\sqrt{3x-1}+(1+x)^2)$$</p>\n<p>$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$</p>\n<p>多行公式：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\displaystyle</span><br><span class=\"line\">\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2</span><br><span class=\"line\">\\leq</span><br><span class=\"line\">\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)</span><br><span class=\"line\">\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\displaystyle </span><br><span class=\"line\">    \\frac{1}{</span><br><span class=\"line\">        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{</span><br><span class=\"line\">        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {</span><br><span class=\"line\">        1+\\frac{e^{-6\\pi}}</span><br><span class=\"line\">        {1+\\frac{e^{-8\\pi}}</span><br><span class=\"line\">         {1+\\cdots} }</span><br><span class=\"line\">        } </span><br><span class=\"line\">    }</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight latex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x) = <span class=\"keyword\">\\int</span><span class=\"built_in\">_</span>{-<span class=\"keyword\">\\infty</span>}<span class=\"built_in\">^</span><span class=\"keyword\">\\infty</span></span><br><span class=\"line\">    <span class=\"keyword\">\\hat</span> f(<span class=\"keyword\">\\xi</span>)<span class=\"keyword\">\\,</span>e<span class=\"built_in\">^</span>{2 <span class=\"keyword\">\\pi</span> i <span class=\"keyword\">\\xi</span> x}</span><br><span class=\"line\">    <span class=\"keyword\">\\,</span>d<span class=\"keyword\">\\xi</span></span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"绘制流程图-Flowchart\"><a href=\"#绘制流程图-Flowchart\" class=\"headerlink\" title=\"绘制流程图 Flowchart\"></a>绘制流程图 Flowchart</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 用户登陆</span><br><span class=\"line\">op=&gt;operation: 登陆操作</span><br><span class=\"line\">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class=\"line\">e=&gt;end: 进入后台</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"绘制序列图-Sequence-Diagram\"><a href=\"#绘制序列图-Sequence-Diagram\" class=\"headerlink\" title=\"绘制序列图 Sequence Diagram\"></a>绘制序列图 Sequence Diagram</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Andrew-&gt;China: Says Hello </span><br><span class=\"line\">Note right of China: China thinks\\nabout it </span><br><span class=\"line\">China--&gt;Andrew: How are you? </span><br><span class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"主要特性\"><a href=\"#主要特性\" class=\"headerlink\" title=\"主要特性\"></a>主要特性</h3><ul>\n<li>支持“标准”Markdown &#x2F; CommonMark和Github风格的语法，也可变身为代码编辑器；</li>\n<li>支持实时预览、图片（跨域）上传、预格式文本&#x2F;代码&#x2F;表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；</li>\n<li>支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；</li>\n<li>支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;</li>\n<li>支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；</li>\n<li>支持 AMD &#x2F; CMD 模块化加载（支持 Require.js &amp; Sea.js），并且支持自定义扩展插件；</li>\n<li>兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；</li>\n<li>支持自定义主题样式；</li>\n</ul>\n<h1 id=\"Editor-md\"><a href=\"#Editor-md\" class=\"headerlink\" title=\"Editor.md\"></a>Editor.md</h1><p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<p>[TOCM]</p>\n<p>[TOC]</p>\n<h1 id=\"Heading-1\"><a href=\"#Heading-1\" class=\"headerlink\" title=\"Heading 1\"></a>Heading 1</h1><h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><h3 id=\"Heading-3\"><a href=\"#Heading-3\" class=\"headerlink\" title=\"Heading 3\"></a>Heading 3</h3><h4 id=\"Heading-4\"><a href=\"#Heading-4\" class=\"headerlink\" title=\"Heading 4\"></a>Heading 4</h4><h5 id=\"Heading-5\"><a href=\"#Heading-5\" class=\"headerlink\" title=\"Heading 5\"></a>Heading 5</h5><h6 id=\"Heading-6\"><a href=\"#Heading-6\" class=\"headerlink\" title=\"Heading 6\"></a>Heading 6</h6><h1 id=\"Heading-1-link-Heading-link\"><a href=\"#Heading-1-link-Heading-link\" class=\"headerlink\" title=\"Heading 1 link Heading link\"></a>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h1><h2 id=\"Heading-2-link-Heading-link\"><a href=\"#Heading-2-link-Heading-link\" class=\"headerlink\" title=\"Heading 2 link Heading link\"></a>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h2><h3 id=\"Heading-3-link-Heading-link\"><a href=\"#Heading-3-link-Heading-link\" class=\"headerlink\" title=\"Heading 3 link Heading link\"></a>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h3><h4 id=\"Heading-4-link-Heading-link-Heading-link-Heading-link\"><a href=\"#Heading-4-link-Heading-link-Heading-link-Heading-link\" class=\"headerlink\" title=\"Heading 4 link Heading link Heading link Heading link\"></a>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h4><h5 id=\"Heading-5-link-Heading-link\"><a href=\"#Heading-5-link-Heading-link\" class=\"headerlink\" title=\"Heading 5 link Heading link\"></a>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h5><h6 id=\"Heading-6-link-Heading-link\"><a href=\"#Heading-6-link-Heading-link\" class=\"headerlink\" title=\"Heading 6 link Heading link\"></a>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h6><h4 id=\"标题（用底线的形式）Heading-underline\"><a href=\"#标题（用底线的形式）Heading-underline\" class=\"headerlink\" title=\"标题（用底线的形式）Heading (underline)\"></a>标题（用底线的形式）Heading (underline)</h4><h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><h3 id=\"字符效果和横线等\"><a href=\"#字符效果和横线等\" class=\"headerlink\" title=\"字符效果和横线等\"></a>字符效果和横线等</h3><hr>\n<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><em><strong>粗斜体</strong></em> <em><strong>粗斜体</strong></em></p>\n<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p>\n<h3 id=\"引用-Blockquotes\"><a href=\"#引用-Blockquotes\" class=\"headerlink\" title=\"引用 Blockquotes\"></a>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"锚点与链接-Links\"><a href=\"#锚点与链接-Links\" class=\"headerlink\" title=\"锚点与链接 Links\"></a>锚点与链接 Links</h3><p><a href=\"http://localhost/\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com/\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\">锚点链接</a> </p>\n<p>GFM a-tail link @pandao</p>\n<blockquote>\n<p>@pandao</p>\n</blockquote>\n<h3 id=\"多语言代码高亮-Codes\"><a href=\"#多语言代码高亮-Codes\" class=\"headerlink\" title=\"多语言代码高亮 Codes\"></a>多语言代码高亮 Codes</h3><h4 id=\"行内代码-Inline-code\"><a href=\"#行内代码-Inline-code\" class=\"headerlink\" title=\"行内代码 Inline code\"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"缩进风格\"><a href=\"#缩进风格\" class=\"headerlink\" title=\"缩进风格\"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似<code>&lt;pre&gt;</code>预格式化文本(Preformatted Text)的功能。</p>\n<pre><code>&lt;?php\n    echo &quot;Hello world!&quot;;\n?&gt;\n</code></pre>\n<p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre>\n<h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码\"></a>JS代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> box.<span class=\"property\">fn</span>.<span class=\"title function_\">init</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    box.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = box.<span class=\"property\">fn</span> = &#123;</span><br><span class=\"line\">        init : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;box.init()&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tadd : <span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;add&quot;</span>, str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tremove : <span class=\"keyword\">function</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;remove&quot;</span>, str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    box.<span class=\"property\">fn</span>.<span class=\"property\">init</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = box.<span class=\"property\">fn</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">box</span> =box;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testBox = <span class=\"title function_\">box</span>();</span><br><span class=\"line\">testBox.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;jQuery&quot;</span>).<span class=\"title function_\">remove</span>(<span class=\"string\">&quot;jQuery&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HTML代码-HTML-codes\"><a href=\"#HTML代码-HTML-codes\" class=\"headerlink\" title=\"HTML代码 HTML codes\"></a>HTML代码 HTML codes</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">charest</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片-Images\"><a href=\"#图片-Images\" class=\"headerlink\" title=\"图片 Images\"></a>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/examples/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"列表-Lists\"><a href=\"#列表-Lists\" class=\"headerlink\" title=\"列表 Lists\"></a>列表 Lists</h3><h4 id=\"无序列表（减号）Unordered-Lists\"><a href=\"#无序列表（减号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（减号）Unordered Lists (-)\"></a>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（星号）Unordered-Lists\"><a href=\"#无序列表（星号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（星号）Unordered Lists (*)\"></a>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（加号和嵌套）Unordered-Lists\"><a href=\"#无序列表（加号和嵌套）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（加号和嵌套）Unordered Lists (+)\"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li>\n<li>列表二<ul>\n<li>列表二-1</li>\n<li>列表二-2</li>\n<li>列表二-3</li>\n</ul>\n</li>\n<li>列表三<ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有序列表-Ordered-Lists\"><a href=\"#有序列表-Ordered-Lists\" class=\"headerlink\" title=\"有序列表 Ordered Lists (-)\"></a>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li>\n<li>第二行</li>\n<li>第三行</li>\n</ol>\n<h4 id=\"GFM-task-list\"><a href=\"#GFM-task-list\" class=\"headerlink\" title=\"GFM task list\"></a>GFM task list</h4><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GFM task list 1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GFM task list 2</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-1</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-2</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-3</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4-1</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4-2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"绘制表格-Tables\"><a href=\"#绘制表格-Tables\" class=\"headerlink\" title=\"绘制表格 Tables\"></a>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Left-Aligned</th>\n<th align=\"center\">Center Aligned</th>\n<th align=\"right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">col 3 is</td>\n<td align=\"center\">some wordy text</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td align=\"left\">col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td align=\"left\">zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th align=\"right\">Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Computer</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"特殊符号-HTML-Entities-Codes\"><a href=\"#特殊符号-HTML-Entities-Codes\" class=\"headerlink\" title=\"特殊符号 HTML Entities Codes\"></a>特殊符号 HTML Entities Codes</h4><p>&amp;copy; &amp;  &amp;uml; &amp;trade; &amp;iexcl; &amp;pound;<br>&amp; &lt; &gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot; </p>\n<p>X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14;  &amp;times;  &amp;divide;   &amp;raquo;</p>\n<p>18&amp;ordm;C  &quot;  &amp;apos;</p>\n<h3 id=\"Emoji表情-smiley\"><a href=\"#Emoji表情-smiley\" class=\"headerlink\" title=\"Emoji表情 :smiley:\"></a>Emoji表情 :smiley:</h3><blockquote>\n<p>Blockquotes :star:</p>\n</blockquote>\n<h4 id=\"GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\"><a href=\"#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\" class=\"headerlink\" title=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> :smiley: @mentions, :smiley: #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> [ ] :smiley: this is a complete item :smiley:;</li>\n<li><input disabled=\"\" type=\"checkbox\"> []this is an incomplete item <a href=\"#\">test link</a> :fa-star: @pandao; </li>\n<li><input disabled=\"\" type=\"checkbox\"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>\n<li><input disabled=\"\" type=\"checkbox\"> :smiley: this is an incomplete item <a href=\"#\">test link</a> :fa-star: :fa-gear:;</li>\n<li><input disabled=\"\" type=\"checkbox\"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href=\"#\">test link</a>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反斜杠-Escape\"><a href=\"#反斜杠-Escape\" class=\"headerlink\" title=\"反斜杠 Escape\"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<h3 id=\"科学公式-TeX-KaTeX\"><a href=\"#科学公式-TeX-KaTeX\" class=\"headerlink\" title=\"科学公式 TeX(KaTeX)\"></a>科学公式 TeX(KaTeX)</h3><p>$$E&#x3D;mc^2$$</p>\n<p>行内的公式$$E&#x3D;mc^2$$行内的公式，行内的$$E&#x3D;mc^2$$公式。</p>\n<p>$$(\\sqrt{3x-1}+(1+x)^2)$$</p>\n<p>$$\\sin(\\alpha)^{\\theta}&#x3D;\\sum_{i&#x3D;0}^{n}(x^i + \\cos(f))$$</p>\n<p>多行公式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\displaystyle</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2</span><br><span class=\"line\">\\leq</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\displaystyle </span><br><span class=\"line\">    \\frac&#123;1&#125;&#123;</span><br><span class=\"line\">        \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;</span><br><span class=\"line\">        \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;</span><br><span class=\"line\">        1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;</span><br><span class=\"line\">        &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125;</span><br><span class=\"line\">         &#123;1+\\cdots&#125; &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight latex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x) = <span class=\"keyword\">\\int</span><span class=\"built_in\">_</span>&#123;-<span class=\"keyword\">\\infty</span>&#125;<span class=\"built_in\">^</span><span class=\"keyword\">\\infty</span></span><br><span class=\"line\">    <span class=\"keyword\">\\hat</span> f(<span class=\"keyword\">\\xi</span>)<span class=\"keyword\">\\,</span>e<span class=\"built_in\">^</span>&#123;2 <span class=\"keyword\">\\pi</span> i <span class=\"keyword\">\\xi</span> x&#125;</span><br><span class=\"line\">    <span class=\"keyword\">\\,</span>d<span class=\"keyword\">\\xi</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"绘制流程图-Flowchart\"><a href=\"#绘制流程图-Flowchart\" class=\"headerlink\" title=\"绘制流程图 Flowchart\"></a>绘制流程图 Flowchart</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 用户登陆</span><br><span class=\"line\">op=&gt;operation: 登陆操作</span><br><span class=\"line\">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class=\"line\">e=&gt;end: 进入后台</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘制序列图-Sequence-Diagram\"><a href=\"#绘制序列图-Sequence-Diagram\" class=\"headerlink\" title=\"绘制序列图 Sequence Diagram\"></a>绘制序列图 Sequence Diagram</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Andrew-&gt;China: Says Hello </span><br><span class=\"line\">Note right of China: China thinks\\nabout it </span><br><span class=\"line\">China--&gt;Andrew: How are you? </span><br><span class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-08-31T02:58:36.254Z","updated":"2022-08-31T02:58:36.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7jrxzhg0002qautasli1dd0","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Swift第一节课类与结构体2","date":"2022-09-02T01:03:44.000Z","_content":"---\nhighlight: a11y-dark\n---\n\n\n# 一、异变方法\n\n第一天我们了解到，Swift 中 class 和 struct 都能定义方法。但是有一点区别的是，默认情况下，值类型属性不能被自身的实例方法修改。\n\n```swift\nstruct Point {\nvar x = 0.0, y = 0.0\nfunc moveBy(x deltaX: Double, y deltaY: Double) {\n\n//self\nx += deltaX\ny += deltaY\n    }\n}\n```\n通过 SIL 来对比一下，不添加 mutating 访问和添加 mutating 两者有什么本质的区别\n\n```swift\nstruct Point {\nvar x = 0.0, y = 0.0\n\nfunc test(){\nlet tmp = self.x\n}\nmutating func moveBy(x deltaX: Double, y deltaY: Double) { \n    x += deltaX\n    y += deltaY\n   }\n}\n```\n\n> sil hidden [ossa] @$s4main5PointV4testyyF : $@convention(method) (Point) ->\n> 这是普通的\n> debug_value %0 : $Point, let, name \"self\", argno 1 // id: %1\n> \n> sil hidden [ossa] @$s4main5PointV6moveBy1x1yySd_SdtF : $@convention(method)\n> 这是加了mutating的\n> @inout Point\n加了mutating的关键字多了一个 @inout关键字\n\nSIL 文档的解释\n\n`An @inout parameter is indirect. The address must be of an initialized object.`（当前参数类型是间接的，传递的是已经初始化过的地址）\n\n异变方法的本质：对于变异方法, 传入的 self 被标记为 inout 参数。无论在 mutating 方法内部发生什么，都会影响外部依赖类型的一切。其实就是告诉外面，你拿的是我的根or源头，可以直接操作我。\n\n**输入输出参数**：如果我们想函数能够修改一个形式参数的值，而且希望这些改变在函数结束之后依然生效，那么就需要将形式参数定义为 输入输出形式参数 。在形式参数定义开始的时候在前边添加一个 `inout`键字可以定义一个输入输出形式参数\n\n# 二、方法调度\n\n//oc里是objc_mgsend\n\n我们先来看一下 Swift 中的方法调度\n\n```js\nclass LGTeacher{ func teach(){\n\nprint(\"teach\") }\n\n}\n\nvar t = LGTeacher() \nt.teach()\n```\nteach函数的调用过程：找到 Metadata ，确定函数地址（metadata + 偏移量）， 执行函数基于函数表的调度之前我们在第一节课讲到了 Metdata 的数据结构，那么 V-Table 是存放在什么地方那？\n\n我们先来回顾一下当前的数据结构\n\n\n```js\nstruct Metadata{\nvar kind: Int\nvar superClass: Any.Type var cacheData: (Int, Int) var data: Int\nvar classFlags: Int32\nvar instanceAddressPoint: UInt32\nvar instanceSize: UInt32\nvar instanceAlignmentMask: UInt16\nvar reserved: UInt16\nvar classSize: UInt32\nvar classAddressPoint: UInt32\nvar typeDescriptor: UnsafeMutableRawPointer var iVarDestroyer: UnsafeRawPointer\n\n}\n```\n\n这里我们有一个东西需要关注 `typeDescriptor` ，不管是 Class ， Struct , Enum 都有自己的 Descriptor ，就是对类的一个详细描述\n\n```js\nstruct TargetClassDescriptor{ var flags: UInt32\nvar parent: UInt32\nvar name: Int32\n\nvar accessFunctionPointer: Int32\nvar fieldDescriptor: Int32\nvar superClassType: Int32\nvar metadataNegativeSizeInWords: UInt32 var metadataPositiveSizeInWords: UInt32 var numImmediateMembers: UInt32\n\nvar numFields: UInt32\nvar fieldOffsetVectorOffset: UInt32 var Offset: UInt32\nvar size: UInt32\n//V-Table\n\n}\n```\n\n### **Mahco**: Mach-O 其实是Mach Object文件格式的缩写，是 mac 以及 iOS 上可执行文件的格式， 类似于 windows 上的 PE 格式 (Portable Executable ), linux 上的 elf 格式 (Executableand Linking Format) 。常见的 .o，.a .dylib Framework，dyld .dsym。\n![WeChat2f0d6f00f519c9d2bb4d574053fd6aa3.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55d2443580c04b64b80683d6a9a4cfb5~tplv-k3u1fbpfcp-watermark.image?)\n\n**Mahoc文件格式：首先是文件头，表明该文件是 Mach-O 格式，指定目标架构，还有一些其他的文件属性信\n息，文件头信息影响后续的文件结构安排 Load commands是一张包含很多内容的表。内容包括区域的位置、符号表、动态符号表等。**\n\n```swift\nLC_SEGMENT_64 将文件中（32位或64位）的段映射到进程地址空间中\nLC_DYLD_INFO_ONLY 动态链接相关信息\n\nLC_SYMTAB 符号地址\n\nLC_DYSYMTAB 动态符号表地址\n\nLC_LOAD_DYLINKER dyld加载\n\nLC_UUID 文件的UUID\n\nLC_VERSION_MIN_MACOSX 支持最低的操作系统版本\n\nLC_SOURCE_VERSION 源代码版本\n\nLC_MAIN 设置程序主线程的入口地址和栈大小\n\nLC_LOAD_DYLIB 依赖库的路径，包含三方库\n\nLC_FUNCTION_STARTS 函数起始地址表\n\nLC_CODE_SIGNATURE 代码签名\n```\n\n- Data 区主要就是负责代码和数据记录的。Mach-O 是以 Segment 这种结构来组织数据的，一个 Segment 可以包含 0 个或多个 Section。根据 Segment 是映射的哪一个 LoadCommand，Segment 中 section 就可以被解读为是是代码，常量或者一些其他的数据类型。在装载在内存中时，也是根据 Segment 做内存映射的。\n\n**方法调度方式总结：**\n\n| 类型 | 调度方式 | extension|\n| --- | --- |---|\n| 值类型 | 静态派发 | 静态派发|\n| 类类型 | 函数表派发 | 静态派发|\n| NSobject子类 | 函数表派发 | 静态派发|\n\n\n# 三、影响函数派发方式\n-  final： 添加了 final 关键字的函数无法被重写，使用静态派发，不会在 vtable 中出现，且 对 objc 运行时不可见。\n\n-  dynamic: 函数均可添加 dynamic 关键字，为非objc类和值类型的函数赋予动态性，但派发方式还是函数表派发。\n\n-  @objc： 该关键字可以将Swift函数暴露给Objc运行时，依旧是函数表派发。\n\n-  @objc + dynamic： 消息派发的方式\n\n","source":"_posts/Swift第一节课类与结构体2.md","raw":"---\ntitle: Swift第一节课类与结构体2\ndate: 2022-09-02 09:03:44\ntags:\n---\n---\nhighlight: a11y-dark\n---\n\n\n# 一、异变方法\n\n第一天我们了解到，Swift 中 class 和 struct 都能定义方法。但是有一点区别的是，默认情况下，值类型属性不能被自身的实例方法修改。\n\n```swift\nstruct Point {\nvar x = 0.0, y = 0.0\nfunc moveBy(x deltaX: Double, y deltaY: Double) {\n\n//self\nx += deltaX\ny += deltaY\n    }\n}\n```\n通过 SIL 来对比一下，不添加 mutating 访问和添加 mutating 两者有什么本质的区别\n\n```swift\nstruct Point {\nvar x = 0.0, y = 0.0\n\nfunc test(){\nlet tmp = self.x\n}\nmutating func moveBy(x deltaX: Double, y deltaY: Double) { \n    x += deltaX\n    y += deltaY\n   }\n}\n```\n\n> sil hidden [ossa] @$s4main5PointV4testyyF : $@convention(method) (Point) ->\n> 这是普通的\n> debug_value %0 : $Point, let, name \"self\", argno 1 // id: %1\n> \n> sil hidden [ossa] @$s4main5PointV6moveBy1x1yySd_SdtF : $@convention(method)\n> 这是加了mutating的\n> @inout Point\n加了mutating的关键字多了一个 @inout关键字\n\nSIL 文档的解释\n\n`An @inout parameter is indirect. The address must be of an initialized object.`（当前参数类型是间接的，传递的是已经初始化过的地址）\n\n异变方法的本质：对于变异方法, 传入的 self 被标记为 inout 参数。无论在 mutating 方法内部发生什么，都会影响外部依赖类型的一切。其实就是告诉外面，你拿的是我的根or源头，可以直接操作我。\n\n**输入输出参数**：如果我们想函数能够修改一个形式参数的值，而且希望这些改变在函数结束之后依然生效，那么就需要将形式参数定义为 输入输出形式参数 。在形式参数定义开始的时候在前边添加一个 `inout`键字可以定义一个输入输出形式参数\n\n# 二、方法调度\n\n//oc里是objc_mgsend\n\n我们先来看一下 Swift 中的方法调度\n\n```js\nclass LGTeacher{ func teach(){\n\nprint(\"teach\") }\n\n}\n\nvar t = LGTeacher() \nt.teach()\n```\nteach函数的调用过程：找到 Metadata ，确定函数地址（metadata + 偏移量）， 执行函数基于函数表的调度之前我们在第一节课讲到了 Metdata 的数据结构，那么 V-Table 是存放在什么地方那？\n\n我们先来回顾一下当前的数据结构\n\n\n```js\nstruct Metadata{\nvar kind: Int\nvar superClass: Any.Type var cacheData: (Int, Int) var data: Int\nvar classFlags: Int32\nvar instanceAddressPoint: UInt32\nvar instanceSize: UInt32\nvar instanceAlignmentMask: UInt16\nvar reserved: UInt16\nvar classSize: UInt32\nvar classAddressPoint: UInt32\nvar typeDescriptor: UnsafeMutableRawPointer var iVarDestroyer: UnsafeRawPointer\n\n}\n```\n\n这里我们有一个东西需要关注 `typeDescriptor` ，不管是 Class ， Struct , Enum 都有自己的 Descriptor ，就是对类的一个详细描述\n\n```js\nstruct TargetClassDescriptor{ var flags: UInt32\nvar parent: UInt32\nvar name: Int32\n\nvar accessFunctionPointer: Int32\nvar fieldDescriptor: Int32\nvar superClassType: Int32\nvar metadataNegativeSizeInWords: UInt32 var metadataPositiveSizeInWords: UInt32 var numImmediateMembers: UInt32\n\nvar numFields: UInt32\nvar fieldOffsetVectorOffset: UInt32 var Offset: UInt32\nvar size: UInt32\n//V-Table\n\n}\n```\n\n### **Mahco**: Mach-O 其实是Mach Object文件格式的缩写，是 mac 以及 iOS 上可执行文件的格式， 类似于 windows 上的 PE 格式 (Portable Executable ), linux 上的 elf 格式 (Executableand Linking Format) 。常见的 .o，.a .dylib Framework，dyld .dsym。\n![WeChat2f0d6f00f519c9d2bb4d574053fd6aa3.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55d2443580c04b64b80683d6a9a4cfb5~tplv-k3u1fbpfcp-watermark.image?)\n\n**Mahoc文件格式：首先是文件头，表明该文件是 Mach-O 格式，指定目标架构，还有一些其他的文件属性信\n息，文件头信息影响后续的文件结构安排 Load commands是一张包含很多内容的表。内容包括区域的位置、符号表、动态符号表等。**\n\n```swift\nLC_SEGMENT_64 将文件中（32位或64位）的段映射到进程地址空间中\nLC_DYLD_INFO_ONLY 动态链接相关信息\n\nLC_SYMTAB 符号地址\n\nLC_DYSYMTAB 动态符号表地址\n\nLC_LOAD_DYLINKER dyld加载\n\nLC_UUID 文件的UUID\n\nLC_VERSION_MIN_MACOSX 支持最低的操作系统版本\n\nLC_SOURCE_VERSION 源代码版本\n\nLC_MAIN 设置程序主线程的入口地址和栈大小\n\nLC_LOAD_DYLIB 依赖库的路径，包含三方库\n\nLC_FUNCTION_STARTS 函数起始地址表\n\nLC_CODE_SIGNATURE 代码签名\n```\n\n- Data 区主要就是负责代码和数据记录的。Mach-O 是以 Segment 这种结构来组织数据的，一个 Segment 可以包含 0 个或多个 Section。根据 Segment 是映射的哪一个 LoadCommand，Segment 中 section 就可以被解读为是是代码，常量或者一些其他的数据类型。在装载在内存中时，也是根据 Segment 做内存映射的。\n\n**方法调度方式总结：**\n\n| 类型 | 调度方式 | extension|\n| --- | --- |---|\n| 值类型 | 静态派发 | 静态派发|\n| 类类型 | 函数表派发 | 静态派发|\n| NSobject子类 | 函数表派发 | 静态派发|\n\n\n# 三、影响函数派发方式\n-  final： 添加了 final 关键字的函数无法被重写，使用静态派发，不会在 vtable 中出现，且 对 objc 运行时不可见。\n\n-  dynamic: 函数均可添加 dynamic 关键字，为非objc类和值类型的函数赋予动态性，但派发方式还是函数表派发。\n\n-  @objc： 该关键字可以将Swift函数暴露给Objc运行时，依旧是函数表派发。\n\n-  @objc + dynamic： 消息派发的方式\n\n","slug":"Swift第一节课类与结构体2","published":1,"updated":"2022-09-02T01:04:18.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7jrxzhm0003qautgyzadnq8","content":"<hr>\n<h2 id=\"highlight-a11y-dark\"><a href=\"#highlight-a11y-dark\" class=\"headerlink\" title=\"highlight: a11y-dark\"></a>highlight: a11y-dark</h2><h1 id=\"一、异变方法\"><a href=\"#一、异变方法\" class=\"headerlink\" title=\"一、异变方法\"></a>一、异变方法</h1><p>第一天我们了解到，Swift 中 class 和 struct 都能定义方法。但是有一点区别的是，默认情况下，值类型属性不能被自身的实例方法修改。</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> {</span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">moveBy</span>(<span class=\"params\">x</span> <span class=\"params\">deltaX</span>: <span class=\"type\">Double</span>, <span class=\"params\">y</span> <span class=\"params\">deltaY</span>: <span class=\"type\">Double</span>) {</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//self</span></span><br><span class=\"line\">x <span class=\"operator\">+=</span> deltaX</span><br><span class=\"line\">y <span class=\"operator\">+=</span> deltaY</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>通过 SIL 来对比一下，不添加 mutating 访问和添加 mutating 两者有什么本质的区别</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> {</span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>(){</span><br><span class=\"line\"><span class=\"keyword\">let</span> tmp <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.x</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">moveBy</span>(<span class=\"params\">x</span> <span class=\"params\">deltaX</span>: <span class=\"type\">Double</span>, <span class=\"params\">y</span> <span class=\"params\">deltaY</span>: <span class=\"type\">Double</span>) { </span><br><span class=\"line\">    x <span class=\"operator\">+=</span> deltaX</span><br><span class=\"line\">    y <span class=\"operator\">+=</span> deltaY</span><br><span class=\"line\">   }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>sil hidden [ossa] @$s4main5PointV4testyyF : $@convention(method) (Point) -&gt;<br>这是普通的<br>debug_value %0 : $Point, let, name “self”, argno 1 // id: %1</p>\n<p>sil hidden [ossa] @$s4main5PointV6moveBy1x1yySd_SdtF : $@convention(method)<br>这是加了mutating的<br>@inout Point<br>加了mutating的关键字多了一个 @inout关键字</p>\n</blockquote>\n<p>SIL 文档的解释</p>\n<p><code>An @inout parameter is indirect. The address must be of an initialized object.</code>（当前参数类型是间接的，传递的是已经初始化过的地址）</p>\n<p>异变方法的本质：对于变异方法, 传入的 self 被标记为 inout 参数。无论在 mutating 方法内部发生什么，都会影响外部依赖类型的一切。其实就是告诉外面，你拿的是我的根or源头，可以直接操作我。</p>\n<p><strong>输入输出参数</strong>：如果我们想函数能够修改一个形式参数的值，而且希望这些改变在函数结束之后依然生效，那么就需要将形式参数定义为 输入输出形式参数 。在形式参数定义开始的时候在前边添加一个 <code>inout</code>键字可以定义一个输入输出形式参数</p>\n<h1 id=\"二、方法调度\"><a href=\"#二、方法调度\" class=\"headerlink\" title=\"二、方法调度\"></a>二、方法调度</h1><p>//oc里是objc_mgsend</p>\n<p>我们先来看一下 Swift 中的方法调度</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LGTeacher</span>{ func <span class=\"title function_\">teach</span>(<span class=\"params\"></span>){</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">print</span>(<span class=\"string\">\"teach\"</span>) }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"title class_\">LGTeacher</span>() </span><br><span class=\"line\">t.<span class=\"title function_\">teach</span>()</span><br></pre></td></tr></tbody></table></figure>\n<p>teach函数的调用过程：找到 Metadata ，确定函数地址（metadata + 偏移量）， 执行函数基于函数表的调度之前我们在第一节课讲到了 Metdata 的数据结构，那么 V-Table 是存放在什么地方那？</p>\n<p>我们先来回顾一下当前的数据结构</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct <span class=\"title class_\">Metadata</span>{</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">kind</span>: <span class=\"title class_\">Int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">superClass</span>: <span class=\"title class_\">Any</span>.<span class=\"property\">Type</span> <span class=\"keyword\">var</span> <span class=\"attr\">cacheData</span>: (<span class=\"title class_\">Int</span>, <span class=\"title class_\">Int</span>) <span class=\"keyword\">var</span> <span class=\"attr\">data</span>: <span class=\"title class_\">Int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">classFlags</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">instanceAddressPoint</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">instanceSize</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">instanceAlignmentMask</span>: <span class=\"title class_\">UInt16</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">reserved</span>: <span class=\"title class_\">UInt16</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">classSize</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">classAddressPoint</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">typeDescriptor</span>: <span class=\"title class_\">UnsafeMutableRawPointer</span> <span class=\"keyword\">var</span> <span class=\"attr\">iVarDestroyer</span>: <span class=\"title class_\">UnsafeRawPointer</span></span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里我们有一个东西需要关注 <code>typeDescriptor</code> ，不管是 Class ， Struct , Enum 都有自己的 Descriptor ，就是对类的一个详细描述</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct <span class=\"title class_\">TargetClassDescriptor</span>{ <span class=\"keyword\">var</span> <span class=\"attr\">flags</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">parent</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">name</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">accessFunctionPointer</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">fieldDescriptor</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">superClassType</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">metadataNegativeSizeInWords</span>: <span class=\"title class_\">UInt32</span> <span class=\"keyword\">var</span> <span class=\"attr\">metadataPositiveSizeInWords</span>: <span class=\"title class_\">UInt32</span> <span class=\"keyword\">var</span> <span class=\"attr\">numImmediateMembers</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">numFields</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">fieldOffsetVectorOffset</span>: <span class=\"title class_\">UInt32</span> <span class=\"keyword\">var</span> <span class=\"title class_\">Offset</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">size</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"comment\">//V-Table</span></span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Mahco-Mach-O-其实是Mach-Object文件格式的缩写，是-mac-以及-iOS-上可执行文件的格式，-类似于-windows-上的-PE-格式-Portable-Executable-linux-上的-elf-格式-Executableand-Linking-Format-。常见的-o，-a-dylib-Framework，dyld-dsym。\"><a href=\"#Mahco-Mach-O-其实是Mach-Object文件格式的缩写，是-mac-以及-iOS-上可执行文件的格式，-类似于-windows-上的-PE-格式-Portable-Executable-linux-上的-elf-格式-Executableand-Linking-Format-。常见的-o，-a-dylib-Framework，dyld-dsym。\" class=\"headerlink\" title=\"Mahco: Mach-O 其实是Mach Object文件格式的缩写，是 mac 以及 iOS 上可执行文件的格式， 类似于 windows 上的 PE 格式 (Portable Executable ), linux 上的 elf 格式 (Executableand Linking Format) 。常见的 .o，.a .dylib Framework，dyld .dsym。\"></a><strong>Mahco</strong>: Mach-O 其实是Mach Object文件格式的缩写，是 mac 以及 iOS 上可执行文件的格式， 类似于 windows 上的 PE 格式 (Portable Executable ), linux 上的 elf 格式 (Executableand Linking Format) 。常见的 .o，.a .dylib Framework，dyld .dsym。</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55d2443580c04b64b80683d6a9a4cfb5~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChat2f0d6f00f519c9d2bb4d574053fd6aa3.png\"></p>\n<p><strong>Mahoc文件格式：首先是文件头，表明该文件是 Mach-O 格式，指定目标架构，还有一些其他的文件属性信<br>息，文件头信息影响后续的文件结构安排 Load commands是一张包含很多内容的表。内容包括区域的位置、符号表、动态符号表等。</strong></p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LC_SEGMENT_64</span> 将文件中（<span class=\"number\">32</span>位或<span class=\"number\">64</span>位）的段映射到进程地址空间中</span><br><span class=\"line\"><span class=\"type\">LC_DYLD_INFO_ONLY</span> 动态链接相关信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_SYMTAB</span> 符号地址</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_DYSYMTAB</span> 动态符号表地址</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_LOAD_DYLINKER</span> dyld加载</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_UUID</span> 文件的<span class=\"type\">UUID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_VERSION_MIN_MACOSX</span> 支持最低的操作系统版本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_SOURCE_VERSION</span> 源代码版本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_MAIN</span> 设置程序主线程的入口地址和栈大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_LOAD_DYLIB</span> 依赖库的路径，包含三方库</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_FUNCTION_STARTS</span> 函数起始地址表</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_CODE_SIGNATURE</span> 代码签名</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>Data 区主要就是负责代码和数据记录的。Mach-O 是以 Segment 这种结构来组织数据的，一个 Segment 可以包含 0 个或多个 Section。根据 Segment 是映射的哪一个 LoadCommand，Segment 中 section 就可以被解读为是是代码，常量或者一些其他的数据类型。在装载在内存中时，也是根据 Segment 做内存映射的。</li>\n</ul>\n<p><strong>方法调度方式总结：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>调度方式</th>\n<th>extension</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>值类型</td>\n<td>静态派发</td>\n<td>静态派发</td>\n</tr>\n<tr>\n<td>类类型</td>\n<td>函数表派发</td>\n<td>静态派发</td>\n</tr>\n<tr>\n<td>NSobject子类</td>\n<td>函数表派发</td>\n<td>静态派发</td>\n</tr>\n</tbody></table>\n<h1 id=\"三、影响函数派发方式\"><a href=\"#三、影响函数派发方式\" class=\"headerlink\" title=\"三、影响函数派发方式\"></a>三、影响函数派发方式</h1><ul>\n<li><p>final： 添加了 final 关键字的函数无法被重写，使用静态派发，不会在 vtable 中出现，且 对 objc 运行时不可见。</p>\n</li>\n<li><p>dynamic: 函数均可添加 dynamic 关键字，为非objc类和值类型的函数赋予动态性，但派发方式还是函数表派发。</p>\n</li>\n<li><p>@objc： 该关键字可以将Swift函数暴露给Objc运行时，依旧是函数表派发。</p>\n</li>\n<li><p>@objc + dynamic： 消息派发的方式</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"highlight-a11y-dark\"><a href=\"#highlight-a11y-dark\" class=\"headerlink\" title=\"highlight: a11y-dark\"></a>highlight: a11y-dark</h2><h1 id=\"一、异变方法\"><a href=\"#一、异变方法\" class=\"headerlink\" title=\"一、异变方法\"></a>一、异变方法</h1><p>第一天我们了解到，Swift 中 class 和 struct 都能定义方法。但是有一点区别的是，默认情况下，值类型属性不能被自身的实例方法修改。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">moveBy</span>(<span class=\"params\">x</span> <span class=\"params\">deltaX</span>: <span class=\"type\">Double</span>, <span class=\"params\">y</span> <span class=\"params\">deltaY</span>: <span class=\"type\">Double</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//self</span></span><br><span class=\"line\">x <span class=\"operator\">+=</span> deltaX</span><br><span class=\"line\">y <span class=\"operator\">+=</span> deltaY</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 SIL 来对比一下，不添加 mutating 访问和添加 mutating 两者有什么本质的区别</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"operator\">=</span> <span class=\"number\">0.0</span>, y <span class=\"operator\">=</span> <span class=\"number\">0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> <span class=\"title function_\">test</span>()&#123;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tmp <span class=\"operator\">=</span> <span class=\"keyword\">self</span>.x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">mutating</span> <span class=\"keyword\">func</span> <span class=\"title function_\">moveBy</span>(<span class=\"params\">x</span> <span class=\"params\">deltaX</span>: <span class=\"type\">Double</span>, <span class=\"params\">y</span> <span class=\"params\">deltaY</span>: <span class=\"type\">Double</span>) &#123; </span><br><span class=\"line\">    x <span class=\"operator\">+=</span> deltaX</span><br><span class=\"line\">    y <span class=\"operator\">+=</span> deltaY</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>sil hidden [ossa] @$s4main5PointV4testyyF : $@convention(method) (Point) -&gt;<br>这是普通的<br>debug_value %0 : $Point, let, name “self”, argno 1 &#x2F;&#x2F; id: %1</p>\n<p>sil hidden [ossa] @$s4main5PointV6moveBy1x1yySd_SdtF : $@convention(method)<br>这是加了mutating的<br>@inout Point<br>加了mutating的关键字多了一个 @inout关键字</p>\n</blockquote>\n<p>SIL 文档的解释</p>\n<p><code>An @inout parameter is indirect. The address must be of an initialized object.</code>（当前参数类型是间接的，传递的是已经初始化过的地址）</p>\n<p>异变方法的本质：对于变异方法, 传入的 self 被标记为 inout 参数。无论在 mutating 方法内部发生什么，都会影响外部依赖类型的一切。其实就是告诉外面，你拿的是我的根or源头，可以直接操作我。</p>\n<p><strong>输入输出参数</strong>：如果我们想函数能够修改一个形式参数的值，而且希望这些改变在函数结束之后依然生效，那么就需要将形式参数定义为 输入输出形式参数 。在形式参数定义开始的时候在前边添加一个 <code>inout</code>键字可以定义一个输入输出形式参数</p>\n<h1 id=\"二、方法调度\"><a href=\"#二、方法调度\" class=\"headerlink\" title=\"二、方法调度\"></a>二、方法调度</h1><p>&#x2F;&#x2F;oc里是objc_mgsend</p>\n<p>我们先来看一下 Swift 中的方法调度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LGTeacher</span>&#123; func <span class=\"title function_\">teach</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">print</span>(<span class=\"string\">&quot;teach&quot;</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> t = <span class=\"title class_\">LGTeacher</span>() </span><br><span class=\"line\">t.<span class=\"title function_\">teach</span>()</span><br></pre></td></tr></table></figure>\n<p>teach函数的调用过程：找到 Metadata ，确定函数地址（metadata + 偏移量）， 执行函数基于函数表的调度之前我们在第一节课讲到了 Metdata 的数据结构，那么 V-Table 是存放在什么地方那？</p>\n<p>我们先来回顾一下当前的数据结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct <span class=\"title class_\">Metadata</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">kind</span>: <span class=\"title class_\">Int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">superClass</span>: <span class=\"title class_\">Any</span>.<span class=\"property\">Type</span> <span class=\"keyword\">var</span> <span class=\"attr\">cacheData</span>: (<span class=\"title class_\">Int</span>, <span class=\"title class_\">Int</span>) <span class=\"keyword\">var</span> <span class=\"attr\">data</span>: <span class=\"title class_\">Int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">classFlags</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">instanceAddressPoint</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">instanceSize</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">instanceAlignmentMask</span>: <span class=\"title class_\">UInt16</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">reserved</span>: <span class=\"title class_\">UInt16</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">classSize</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">classAddressPoint</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">typeDescriptor</span>: <span class=\"title class_\">UnsafeMutableRawPointer</span> <span class=\"keyword\">var</span> <span class=\"attr\">iVarDestroyer</span>: <span class=\"title class_\">UnsafeRawPointer</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们有一个东西需要关注 <code>typeDescriptor</code> ，不管是 Class ， Struct , Enum 都有自己的 Descriptor ，就是对类的一个详细描述</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct <span class=\"title class_\">TargetClassDescriptor</span>&#123; <span class=\"keyword\">var</span> <span class=\"attr\">flags</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">parent</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">name</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">accessFunctionPointer</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">fieldDescriptor</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">superClassType</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">metadataNegativeSizeInWords</span>: <span class=\"title class_\">UInt32</span> <span class=\"keyword\">var</span> <span class=\"attr\">metadataPositiveSizeInWords</span>: <span class=\"title class_\">UInt32</span> <span class=\"keyword\">var</span> <span class=\"attr\">numImmediateMembers</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">numFields</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">fieldOffsetVectorOffset</span>: <span class=\"title class_\">UInt32</span> <span class=\"keyword\">var</span> <span class=\"title class_\">Offset</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"attr\">size</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\"><span class=\"comment\">//V-Table</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mahco-Mach-O-其实是Mach-Object文件格式的缩写，是-mac-以及-iOS-上可执行文件的格式，-类似于-windows-上的-PE-格式-Portable-Executable-linux-上的-elf-格式-Executableand-Linking-Format-。常见的-o，-a-dylib-Framework，dyld-dsym。\"><a href=\"#Mahco-Mach-O-其实是Mach-Object文件格式的缩写，是-mac-以及-iOS-上可执行文件的格式，-类似于-windows-上的-PE-格式-Portable-Executable-linux-上的-elf-格式-Executableand-Linking-Format-。常见的-o，-a-dylib-Framework，dyld-dsym。\" class=\"headerlink\" title=\"Mahco: Mach-O 其实是Mach Object文件格式的缩写，是 mac 以及 iOS 上可执行文件的格式， 类似于 windows 上的 PE 格式 (Portable Executable ), linux 上的 elf 格式 (Executableand Linking Format) 。常见的 .o，.a .dylib Framework，dyld .dsym。\"></a><strong>Mahco</strong>: Mach-O 其实是Mach Object文件格式的缩写，是 mac 以及 iOS 上可执行文件的格式， 类似于 windows 上的 PE 格式 (Portable Executable ), linux 上的 elf 格式 (Executableand Linking Format) 。常见的 .o，.a .dylib Framework，dyld .dsym。</h3><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55d2443580c04b64b80683d6a9a4cfb5~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChat2f0d6f00f519c9d2bb4d574053fd6aa3.png\"></p>\n<p><strong>Mahoc文件格式：首先是文件头，表明该文件是 Mach-O 格式，指定目标架构，还有一些其他的文件属性信<br>息，文件头信息影响后续的文件结构安排 Load commands是一张包含很多内容的表。内容包括区域的位置、符号表、动态符号表等。</strong></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">LC_SEGMENT_64</span> 将文件中（<span class=\"number\">32</span>位或<span class=\"number\">64</span>位）的段映射到进程地址空间中</span><br><span class=\"line\"><span class=\"type\">LC_DYLD_INFO_ONLY</span> 动态链接相关信息</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_SYMTAB</span> 符号地址</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_DYSYMTAB</span> 动态符号表地址</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_LOAD_DYLINKER</span> dyld加载</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_UUID</span> 文件的<span class=\"type\">UUID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_VERSION_MIN_MACOSX</span> 支持最低的操作系统版本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_SOURCE_VERSION</span> 源代码版本</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_MAIN</span> 设置程序主线程的入口地址和栈大小</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_LOAD_DYLIB</span> 依赖库的路径，包含三方库</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_FUNCTION_STARTS</span> 函数起始地址表</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LC_CODE_SIGNATURE</span> 代码签名</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Data 区主要就是负责代码和数据记录的。Mach-O 是以 Segment 这种结构来组织数据的，一个 Segment 可以包含 0 个或多个 Section。根据 Segment 是映射的哪一个 LoadCommand，Segment 中 section 就可以被解读为是是代码，常量或者一些其他的数据类型。在装载在内存中时，也是根据 Segment 做内存映射的。</li>\n</ul>\n<p><strong>方法调度方式总结：</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>调度方式</th>\n<th>extension</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>值类型</td>\n<td>静态派发</td>\n<td>静态派发</td>\n</tr>\n<tr>\n<td>类类型</td>\n<td>函数表派发</td>\n<td>静态派发</td>\n</tr>\n<tr>\n<td>NSobject子类</td>\n<td>函数表派发</td>\n<td>静态派发</td>\n</tr>\n</tbody></table>\n<h1 id=\"三、影响函数派发方式\"><a href=\"#三、影响函数派发方式\" class=\"headerlink\" title=\"三、影响函数派发方式\"></a>三、影响函数派发方式</h1><ul>\n<li><p>final： 添加了 final 关键字的函数无法被重写，使用静态派发，不会在 vtable 中出现，且 对 objc 运行时不可见。</p>\n</li>\n<li><p>dynamic: 函数均可添加 dynamic 关键字，为非objc类和值类型的函数赋予动态性，但派发方式还是函数表派发。</p>\n</li>\n<li><p>@objc： 该关键字可以将Swift函数暴露给Objc运行时，依旧是函数表派发。</p>\n</li>\n<li><p>@objc + dynamic： 消息派发的方式</p>\n</li>\n</ul>\n"},{"title":"Swift第一节课属性","date":"2022-09-02T01:07:46.000Z","_content":"---\nhighlight: a11y-dark\ntheme: channing-cyan\n---\nSwift中属性可分为两大类：存储属性（Stored Property），计算属性（Computed Property）。\n# **存储属性**\n存储属性是一个作为类和结构体实例的一部分的常量或变量。存储要么是是变量存储属性（var声明变量，可在将来设置为不同的值）要么是常量存储属性（let声明常量，常量的值一旦设置好不能再被更改），存储属性可以说是类或结构体的成员变量，因为它和类或结构体的内存结构有关。\n\n**let和var的对比**\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0518fdeb35245de86d5020e6028d7b6~tplv-k3u1fbpfcp-watermark.image?)\n**汇编分析两者**\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c3c9e38ed5a4539a13049f8b5d3f747~tplv-k3u1fbpfcp-watermark.image?)\n汇编代码看没有区别，都是将值存储到了寄存器中\n\n**lldb调试查看内存**\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/532d9fb60df949e3b0e6385579d766e5~tplv-k3u1fbpfcp-watermark.image?)\n看到，x,y 在相邻的内存区域，连续的，都在__DATA.__common这个区域\n\n**sil分析**\nvar get set\nlet get\n```\n@_hasStorage @_hasInitialValue var x: Int { get set }\n@_hasStorage @_hasInitialValue let y: Int { get }\n```\n# **计算属性**\n\n类、结构体、枚举都能够定义计算属性，但计算属性并不存储值，他们提供了setter和getter方法来修改和获取值。对于存储属性来说可以是常量或者变量，但对于计算属性必须定义为变量。与此同时我们书写计算属性时鼻血包含类型，因为编译器需要知道期望返回值是什么。\n\n```swift\n**struct** square{\n\n    //实例中占据内存\n\n    **var** width : Double\n\n    //不占用内存\n\n    **var** area:Double{\n\n        **get**{\n\n            **return** width * width\n\n        }**set**{\n\n            **self**.width = newValue\n\n        }\n\n    }\n\n}\n\n\\\n\n\n**var** s = square(width: 10)\n\ns.area = 30\n\nprint(s.area)\n\nprint(\"end\")\n```\ns.area的本质是调用方法，我们将上面的代码转为sil文件\n```swift\nstruct square {\n\n  @_hasStorage var width: Double { get set }\n\n  var area: Double { get set }\n\n  init(width: Double)\n\n}\n```\n\n可以看到area是没有hasStorage存储属性的，但width是有存储属性的，但是他们都有get和set方法，顾名思义可知，他们之间最大的差别就是一个可以记录存储值，一个仅仅调用set和get方法但并不存储该属性的值。\n\n我们变换一下代码，我们将存储属性area的set方法私有化，并且定义一个height，我们将代码转换成sil文件看看区别：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92dcaa4d33914ba9bf77081d3504ece9~tplv-k3u1fbpfcp-watermark.image?)\nsil文件可以看到area是一个存储属性，set方法不能调用\n\n总结：计算属性本质就是调用set和get方法。\n```swift\nstruct square {\n\n  @_hasStorage var width: Double { get set }\n\n  @_hasStorage @_hasInitialValue private(set) var area: Double { get set }\n\n  @_hasStorage @_hasInitialValue let height: Double { get }\n\n  func test()\n\n  init(width: Double, area: Double = 40.0)\n\n}\n```\n\n# **属性观察者**\n- 属性观察者用来观察属性值的变化，一个willSet再当属性将改变调用，即使这个值与原来的值相同，而didSet在属性已经改变之后调用。他们的语法类似于getter和setter\n- willSet会传递新值，默认叫newvalue，didset会传递旧值，默认叫oldVlaue。\n- 在初始化器中设置属性值不会触发willSet和didSet，在属性定义设置初始值时也不会触发willSet和didSet。\n\n\n![WeChatf944604070cbad33664ed5d60169e204.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbdc35be13bb4f79abb4f82e5b459e47~tplv-k3u1fbpfcp-watermark.image?)\n\n 属性观察者在继承关系下的调用顺序\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a170c5772aa4634848d22f798c639fe~tplv-k3u1fbpfcp-watermark.image?)\n调用顺序：子类 `willSet` -> 父类 `willSet` -> 父类 `didSet` -> 子类 `didSet`。\n全局变量和局部变量也可以使用属性观察器。\n\n# **延迟存储属性**\n\n\n```swift\nclass Student{\n    lazy var age : Int = 18\n}\nvar s = Subject()\nprint(s.age)\n```\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/463de7af01294c0b986f5e1b27ac5393~tplv-k3u1fbpfcp-watermark.image?)\nsil文件查看结构\n\n```swift\nclass Student {\n\n  lazy var age: Int { get set }\n\n  @_hasStorage @_hasInitialValue final var $__lazy_storage_$_age: Int? { get set }\n\n  @objc deinit\n\n  init()\n\n}\n```\n可以看到lazy修饰的age变成了一个`_age: Int? { get set }`可选类型，可选类型默认初始化为nil。延迟存储属性并不是线程安全的\n\n# **类型属性(Type Property)**\n\n属性可以分为实例属性（instance Property）和类型属性（Type Property）。\n\n### 1。实例属性\n存储实例属性（stored Instance Property）：存储在实例的内存中，每个实例都有一份。\n计算实例属性（computed Instance Property）：\n实例属性只能通过实例去访问，在上面所讲的属性都属于实例属性。\n### 2.类型属性\n- 存储类型属性（Stored Type Property）：整个程序运行过程中，就只有一份内存（类似于全局变量）。\n- 计算类型属性（Computed Type Property）\n- 可以通过static定义类型属性，如果是类，也可以用关键字class。\n类型属性，只能通过类型去访问。在结构体中定义一个属性，可以通过static来修饰。\n\n```swift\n**struct** Car {\n    **static** **var** count:Int = 0\n}\nCar.count = 100\n```\n- 不同于存储实例属性，你必须给存储类型属性定义初始值，因为类型没有实例那样的init初始化器取初始化值。\n- 存储类型属性默认就是lazy，会在第一次使用的时候才初始化，就算被多个线程访问，也能保证只会初始化一次。\n- 存储类型属性可以是let。\n- 枚举类型也可以定义类型属性（存储、计算）\n\n### 3.单例模式\n在oc中设计单例模式代码大致\n\n```oc\n+（SSnetWorkManager *）sharedManger;\n+ (SSnetWorkManager *)sharedManger{\n    static SSnetWorkManager *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken,^{\n        instance = [SSnetWorkManager alloc]init];\n    });\n    \n    return instance;\n}\n```\n在Swift中设计的单例代码如下\n\n\n```swift\npublic class SSNetWorkManager{\n    public static let shared = SSNetWorkManager()\n    private init(){}\n}\n或者\npublic class SSSNetWorkManager{\n    public static let shared = {\n        return SSSNetWorkManager()\n    }\n    private init(){}\n}\n\n```\n\n在初始化器 `init` 前用 `private` 修饰，可以将被修饰的初始化器进行私有，外部访问只能通过 shared 来进行访问。\n\n在 OC 中，我们在设计单例模式的时候，为了保证线程安全，通常会配合 `dispatch_once` 来创建实例，以保证单例对象在内存中只有一份。但在写 `Swift` 的单例的时候，并不需要写 `dispatch_once` 来配合创建实例，那 Swift 的单例是如何保证线程安全的呢？请往下看。\n\n#### Swift单例模式的本质\n编译后的sil代码\n\n```js\n@_hasMissingDesignatedInitializers public class SHNetworkManager {\n    @_hasStorage @_hasInitialValue public static let shared: SHNetworkManager { get }\n    private init()\n    @objc deinit\n}\n```\ngetter实现\n\n```js\n// static SHNetworkManager.shared.getter\nsil [transparent] @$s14ViewController16SHNetworkManagerC6sharedACvgZ : $@convention(method) (@thick SHNetworkManager.Type) -> @owned SHNetworkManager {\n    // %0 \"self\"                                      // user: %1\n    bb0(%0 : $@thick SHNetworkManager.Type):\n    debug_value %0 : $@thick SHNetworkManager.Type, let, name \"self\", argno 1 // id: %1\n    // function_ref SHNetworkManager.shared.unsafeMutableAddressor 看这里\n    %2 = function_ref @$s14ViewController16SHNetworkManagerC6sharedACvau : $@convention(thin) () -> Builtin.RawPointer // user: %3\n    %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4\n    %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*SHNetworkManager // user: %5\n    %5 = load %4 : $*SHNetworkManager               // users: %7, %6\n    strong_retain %5 : $SHNetworkManager            // id: %6\n    return %5 : $SHNetworkManager                   // id: %7\n} // end sil function '$s14ViewController16SHNetworkManagerC6sharedACvgZ'\n\n```\n在 getter 中，调用了一个 `unsafeMutableAddressor` 方法，`unsafeMutableAddressor` 的实现如下：\n\n```// SHNetworkManager.shared.unsafeMutableAddressor\nsil [global_init] @$s14ViewController16SHNetworkManagerC6sharedACvau : $@convention(thin) () -> Builtin.RawPointer {\nbb0:\n%0 = global_addr @$s14ViewController16SHNetworkManagerC6shared_Wz : $*Builtin.Word // user: %1\n%1 = address_to_pointer %0 : $*Builtin.Word to $Builtin.RawPointer // user: %3\n// function_ref one-time initialization function for shared\n//共享的一次性初始化函数\n%2 = function_ref @$s14ViewController16SHNetworkManagerC6shared_WZ : $@convention(c) () -> () // user: %3\n**//看这里的once** \n%3 = builtin \"once\"(%1 : $Builtin.RawPointer, %2 : $@convention(c) () -> ()) : $()\n%4 = global_addr @$s14ViewController16SHNetworkManagerC6sharedACvpZ : $*SHNetworkManager // user: %5\n%5 = address_to_pointer %4 : $*SHNetworkManager to $Builtin.RawPointer // user: %6\nreturn %5 : $Builtin.RawPointer                 // id: %6\n} // end sil function '$s14ViewController16SHNetworkManagerC6sharedACvau'\n\n```\n编译出ir代码，全局来查找once。\n\n```js\nswiftc -emit-ir ${SRCROOT}/LGSwiftTest/main.swift > ./main.ll && open main.ll\n```\n\n```js\ndefine swiftcc i8* @\"$s4main16SSNetWorkManagerC6sharedACvau\"() #0 {\n\nentry:\n\n  %0 = load i64, i64* @\"$s4main16SSNetWorkManagerC6shared_Wz\", align 8\n\n  %1 = icmp eq i64 %0, -1\n\n  %2 = call i1 @llvm.expect.i1(i1 %1, i1 true)\n\n  br i1 %2, label %once_done, label %once_not_done\n\nonce_done:                                        ; preds = %once_not_done, %entry\n\n  %3 = load i64, i64* @\"$s4main16SSNetWorkManagerC6shared_Wz\", align 8\n\n  %4 = icmp eq i64 %3, -1\n\n  call void @llvm.assume(i1 %4)\n\n  ret i8* bitcast (%T4main16SSNetWorkManagerC** @\"$s4main16SSNetWorkManagerC6sharedACvpZ\" to i8*)\n\nonce_not_done:                                    ; preds = %entry\n\n  call void @swift_once(i64* @\"$s4main16SSNetWorkManagerC6shared_Wz\", i8* bitcast (void ()* @\"$s4main16SSNetWorkManagerC6shared_WZ\" to i8*), i8* undef)\n\n  br label %once_done\n\n}\n```\n混写过后的方法`s14ViewController16SHNetworkManagerC6sharedACvau`，在sil代码中是`SHNetworkManager.shared.unsafeMutableAddressor`，下面有once_not_done，里面有swift_once，\n猜测它是一个swift内部的一个函数，在swift源码中搜索，在源码中**Once.cpp**中\n\n```\n/// Runs the given function with the given context argument exactly once.\n/// The predicate argument must point to a global or static variable of static\n/// extent of type swift_once_t.\nvoid swift::swift_once(swift_once_t *predicate, void (*fn)(void *),\n                       void *context) {\n#ifdef SWIFT_STDLIB_SINGLE_THREADED_RUNTIME\n  if (! *predicate) {\n    *predicate = true;\n    fn(context);\n  }\n#elif defined(__APPLE__)\n  dispatch_once_f(predicate, context, fn);\n#elif defined(__CYGWIN__)\n  _swift_once_f(predicate, context, fn);\n#else\n  std::call_once(*predicate, [fn, context]() { fn(context); });\n#endif\n}\n```\n如果等于 `__APPLE__`，会调用 `dispatch_once_f` 函数，就是 iOS 中 **GCD** 的函数。所以 Swift 中单例模式在底层中是和 OC 一样，都调用了 **GCD** 的函数。并且这个函数在执行一次后就不会在执行，以保证线程安全。\n\n# 属性在Mach-O中的位置\n类的方法是存放在VTable中。\nSwift类的本质是一个HeapObject的结构体指针，在HeapObject中有一个metadata，metadata中有一个Description成员变量，Description是名为TargeClassDescription的类，在TargetDescription中有一个VTable存储Swift类中的方法。\n那么Swift中类的属性又放在哪里呢，我们来看一个TatgetClassDescription的结构：它继承了两个类，这是抽出来的\n\n```js\nclass TargetClassDescriptor {\n    var flags: UInt32 4字节\n    var parent: UInt32\n    var name: Int32\n    var accessFunctionPointer: Int32\n    var fieldDescriptor: Int32\n    var superClassType: Int32\n    var metadataNegativeSizeInWords: UInt32\n    var metadataPositiveSizeInWords: UInt32\n    var numImmediateMembers: UInt32\n    var numFields: UInt32\n    var fieldOffsetVectorOffset: UInt32\n    var Offset: UInt32\n    // var size: UInt32\n    //V-Table\n}\n```\nSWift类的属性存放在fieldDescription中的，其源码定义在Metadata.h中的TargetTypeContextDescription类中，注意：**TatgetClassDescription**继承自**TargetTypeContextDescriptor**。\n源码定义如下：\n\n```js\n/// A pointer to the field descriptor for the type, if any.\nTargetRelativeDirectPointer<Runtime, const reflection::FieldDescriptor, /*nullable*/ true> Fields;\n```\n点进去看FieldDescription的结构大致如下：\n\n```js\n// Field descriptors contain a collection of field records for a single\n// class, struct or enum declaration.\nclass FieldDescriptor {\n  const FieldRecord *getFieldRecordBuffer() const {\n    return reinterpret_cast<const FieldRecord *>(this + 1);\n  }\n\npublic:\n  const RelativeDirectPointer<const char> MangledTypeName;\n  const RelativeDirectPointer<const char> Superclass;\n\n  FieldDescriptor() = delete;\n\n  const FieldDescriptorKind Kind;\n  const uint16_t FieldRecordSize;\n  const uint32_t NumFields;\n  \n  using const_iterator = FieldRecordIterator;\n```\n整理出来，FieldDescriptor的结构体大致如下：\n\n```js\nclass FieldDescriptor{\n    MangledTypeName int32\n    Superclass int32\n    Kind uint16\n    FieldRecordSize uint16\n    NumFields int32\n    //这个没有体现出来 便于理解写在下面 源码里是这个\n    //using const_iterator = FieldRecordIterator;\n    FieldRecords 【FiedlRecord】\n}\n```\n在FieldDescriptor中有这么几个方法：\n\n```js\n const_iterator begin() const {\n    auto Begin = getFieldRecordBuffer();\n    auto End = Begin + NumFields;\n    return const_iterator { Begin, End };\n  }\n\n  const_iterator end() const {\n    auto Begin = getFieldRecordBuffer();\n    auto End = Begin + NumFields;\n    return const_iterator { End, End };\n  }\n\n  llvm::ArrayRef<FieldRecord> getFields() const {\n    return {getFieldRecordBuffer(), NumFields};\n  }\n```\n从这三个方法可以看出这个是迭代器，const_iterator是FieldRecordIterator，其源码结构如下：\n\n```js\nstruct FieldRecordIterator {\n  const FieldRecord *Cur;\n  const FieldRecord * const End;\n\n  FieldRecordIterator(const FieldRecord *Cur, const FieldRecord * const End)\n    : Cur(Cur), End(End) {}\n\n  const FieldRecord &operator*() const {\n    return *Cur;\n  }\n\n  const FieldRecord *operator->() const {\n    return Cur;\n  }\n\n  FieldRecordIterator &operator++() {\n    ++Cur;\n    return *this;\n  }\n\n  bool operator==(const FieldRecordIterator &other) const {\n    return Cur == other.Cur && End == other.End;\n  }\n\n  bool operator!=(const FieldRecordIterator &other) const {\n    return !(*this == other);\n  }\n};\n\n```\n成员变量为FieldRecord，我们来看一下它在源码的结构：\n\n```js\nclass FieldRecord {\n  const FieldRecordFlags Flags;\n\npublic:\n  const RelativeDirectPointer<const char> MangledTypeName;\n  const RelativeDirectPointer<const char> FieldName;\n\n  FieldRecord() = delete;\n\n  bool hasMangledTypeName() const {\n    return MangledTypeName;\n  }\n\n  StringRef getMangledTypeName() const {\n    return Demangle::makeSymbolicMangledNameStringRef(MangledTypeName.get());\n  }\n\n  StringRef getFieldName() const {\n    return FieldName.get();\n  }\n\n  bool isIndirectCase() const {\n    return Flags.isIndirectCase();\n  }\n\n  bool isVar() const {\n    return Flags.isVar();\n  }\n}\n```\n他有三个成员变量：Flags,MangledTypeName,FieldName.Flags不用管，MangledTypeName为它的类型信息，FieldName是它的属性的名称信息。\n到这里，我们基本可以确定属性存储在底层源码的结构以及位置，我们的查找流程如下：\n\n- 找到**HeapObject**。\n- 从**HeapObject**中找到**HeapMetaData**。\n- 继续跟进，**HeapMetadata**为 **TargetHeapMetadata**的别名\n- 找到**TargetHeapMetadata**结构体，找到**TargetClassDescriptor**，然后找到**TargetTypeContextDescriptor**，并且找到了**Fields**成员变量。\n- 通过Fields找到了**FieldDescriptor**的定义，并且找到其中的**FieldRecords**，\n- 通过迭代器**FieldRecodIterator**，找到了**FieldRecord**。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Swift第一节课属性.md","raw":"---\ntitle: Swift第一节课属性\ndate: 2022-09-02 09:07:46\ntags:\n---\n---\nhighlight: a11y-dark\ntheme: channing-cyan\n---\nSwift中属性可分为两大类：存储属性（Stored Property），计算属性（Computed Property）。\n# **存储属性**\n存储属性是一个作为类和结构体实例的一部分的常量或变量。存储要么是是变量存储属性（var声明变量，可在将来设置为不同的值）要么是常量存储属性（let声明常量，常量的值一旦设置好不能再被更改），存储属性可以说是类或结构体的成员变量，因为它和类或结构体的内存结构有关。\n\n**let和var的对比**\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0518fdeb35245de86d5020e6028d7b6~tplv-k3u1fbpfcp-watermark.image?)\n**汇编分析两者**\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c3c9e38ed5a4539a13049f8b5d3f747~tplv-k3u1fbpfcp-watermark.image?)\n汇编代码看没有区别，都是将值存储到了寄存器中\n\n**lldb调试查看内存**\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/532d9fb60df949e3b0e6385579d766e5~tplv-k3u1fbpfcp-watermark.image?)\n看到，x,y 在相邻的内存区域，连续的，都在__DATA.__common这个区域\n\n**sil分析**\nvar get set\nlet get\n```\n@_hasStorage @_hasInitialValue var x: Int { get set }\n@_hasStorage @_hasInitialValue let y: Int { get }\n```\n# **计算属性**\n\n类、结构体、枚举都能够定义计算属性，但计算属性并不存储值，他们提供了setter和getter方法来修改和获取值。对于存储属性来说可以是常量或者变量，但对于计算属性必须定义为变量。与此同时我们书写计算属性时鼻血包含类型，因为编译器需要知道期望返回值是什么。\n\n```swift\n**struct** square{\n\n    //实例中占据内存\n\n    **var** width : Double\n\n    //不占用内存\n\n    **var** area:Double{\n\n        **get**{\n\n            **return** width * width\n\n        }**set**{\n\n            **self**.width = newValue\n\n        }\n\n    }\n\n}\n\n\\\n\n\n**var** s = square(width: 10)\n\ns.area = 30\n\nprint(s.area)\n\nprint(\"end\")\n```\ns.area的本质是调用方法，我们将上面的代码转为sil文件\n```swift\nstruct square {\n\n  @_hasStorage var width: Double { get set }\n\n  var area: Double { get set }\n\n  init(width: Double)\n\n}\n```\n\n可以看到area是没有hasStorage存储属性的，但width是有存储属性的，但是他们都有get和set方法，顾名思义可知，他们之间最大的差别就是一个可以记录存储值，一个仅仅调用set和get方法但并不存储该属性的值。\n\n我们变换一下代码，我们将存储属性area的set方法私有化，并且定义一个height，我们将代码转换成sil文件看看区别：\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92dcaa4d33914ba9bf77081d3504ece9~tplv-k3u1fbpfcp-watermark.image?)\nsil文件可以看到area是一个存储属性，set方法不能调用\n\n总结：计算属性本质就是调用set和get方法。\n```swift\nstruct square {\n\n  @_hasStorage var width: Double { get set }\n\n  @_hasStorage @_hasInitialValue private(set) var area: Double { get set }\n\n  @_hasStorage @_hasInitialValue let height: Double { get }\n\n  func test()\n\n  init(width: Double, area: Double = 40.0)\n\n}\n```\n\n# **属性观察者**\n- 属性观察者用来观察属性值的变化，一个willSet再当属性将改变调用，即使这个值与原来的值相同，而didSet在属性已经改变之后调用。他们的语法类似于getter和setter\n- willSet会传递新值，默认叫newvalue，didset会传递旧值，默认叫oldVlaue。\n- 在初始化器中设置属性值不会触发willSet和didSet，在属性定义设置初始值时也不会触发willSet和didSet。\n\n\n![WeChatf944604070cbad33664ed5d60169e204.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbdc35be13bb4f79abb4f82e5b459e47~tplv-k3u1fbpfcp-watermark.image?)\n\n 属性观察者在继承关系下的调用顺序\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a170c5772aa4634848d22f798c639fe~tplv-k3u1fbpfcp-watermark.image?)\n调用顺序：子类 `willSet` -> 父类 `willSet` -> 父类 `didSet` -> 子类 `didSet`。\n全局变量和局部变量也可以使用属性观察器。\n\n# **延迟存储属性**\n\n\n```swift\nclass Student{\n    lazy var age : Int = 18\n}\nvar s = Subject()\nprint(s.age)\n```\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/463de7af01294c0b986f5e1b27ac5393~tplv-k3u1fbpfcp-watermark.image?)\nsil文件查看结构\n\n```swift\nclass Student {\n\n  lazy var age: Int { get set }\n\n  @_hasStorage @_hasInitialValue final var $__lazy_storage_$_age: Int? { get set }\n\n  @objc deinit\n\n  init()\n\n}\n```\n可以看到lazy修饰的age变成了一个`_age: Int? { get set }`可选类型，可选类型默认初始化为nil。延迟存储属性并不是线程安全的\n\n# **类型属性(Type Property)**\n\n属性可以分为实例属性（instance Property）和类型属性（Type Property）。\n\n### 1。实例属性\n存储实例属性（stored Instance Property）：存储在实例的内存中，每个实例都有一份。\n计算实例属性（computed Instance Property）：\n实例属性只能通过实例去访问，在上面所讲的属性都属于实例属性。\n### 2.类型属性\n- 存储类型属性（Stored Type Property）：整个程序运行过程中，就只有一份内存（类似于全局变量）。\n- 计算类型属性（Computed Type Property）\n- 可以通过static定义类型属性，如果是类，也可以用关键字class。\n类型属性，只能通过类型去访问。在结构体中定义一个属性，可以通过static来修饰。\n\n```swift\n**struct** Car {\n    **static** **var** count:Int = 0\n}\nCar.count = 100\n```\n- 不同于存储实例属性，你必须给存储类型属性定义初始值，因为类型没有实例那样的init初始化器取初始化值。\n- 存储类型属性默认就是lazy，会在第一次使用的时候才初始化，就算被多个线程访问，也能保证只会初始化一次。\n- 存储类型属性可以是let。\n- 枚举类型也可以定义类型属性（存储、计算）\n\n### 3.单例模式\n在oc中设计单例模式代码大致\n\n```oc\n+（SSnetWorkManager *）sharedManger;\n+ (SSnetWorkManager *)sharedManger{\n    static SSnetWorkManager *instance = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken,^{\n        instance = [SSnetWorkManager alloc]init];\n    });\n    \n    return instance;\n}\n```\n在Swift中设计的单例代码如下\n\n\n```swift\npublic class SSNetWorkManager{\n    public static let shared = SSNetWorkManager()\n    private init(){}\n}\n或者\npublic class SSSNetWorkManager{\n    public static let shared = {\n        return SSSNetWorkManager()\n    }\n    private init(){}\n}\n\n```\n\n在初始化器 `init` 前用 `private` 修饰，可以将被修饰的初始化器进行私有，外部访问只能通过 shared 来进行访问。\n\n在 OC 中，我们在设计单例模式的时候，为了保证线程安全，通常会配合 `dispatch_once` 来创建实例，以保证单例对象在内存中只有一份。但在写 `Swift` 的单例的时候，并不需要写 `dispatch_once` 来配合创建实例，那 Swift 的单例是如何保证线程安全的呢？请往下看。\n\n#### Swift单例模式的本质\n编译后的sil代码\n\n```js\n@_hasMissingDesignatedInitializers public class SHNetworkManager {\n    @_hasStorage @_hasInitialValue public static let shared: SHNetworkManager { get }\n    private init()\n    @objc deinit\n}\n```\ngetter实现\n\n```js\n// static SHNetworkManager.shared.getter\nsil [transparent] @$s14ViewController16SHNetworkManagerC6sharedACvgZ : $@convention(method) (@thick SHNetworkManager.Type) -> @owned SHNetworkManager {\n    // %0 \"self\"                                      // user: %1\n    bb0(%0 : $@thick SHNetworkManager.Type):\n    debug_value %0 : $@thick SHNetworkManager.Type, let, name \"self\", argno 1 // id: %1\n    // function_ref SHNetworkManager.shared.unsafeMutableAddressor 看这里\n    %2 = function_ref @$s14ViewController16SHNetworkManagerC6sharedACvau : $@convention(thin) () -> Builtin.RawPointer // user: %3\n    %3 = apply %2() : $@convention(thin) () -> Builtin.RawPointer // user: %4\n    %4 = pointer_to_address %3 : $Builtin.RawPointer to [strict] $*SHNetworkManager // user: %5\n    %5 = load %4 : $*SHNetworkManager               // users: %7, %6\n    strong_retain %5 : $SHNetworkManager            // id: %6\n    return %5 : $SHNetworkManager                   // id: %7\n} // end sil function '$s14ViewController16SHNetworkManagerC6sharedACvgZ'\n\n```\n在 getter 中，调用了一个 `unsafeMutableAddressor` 方法，`unsafeMutableAddressor` 的实现如下：\n\n```// SHNetworkManager.shared.unsafeMutableAddressor\nsil [global_init] @$s14ViewController16SHNetworkManagerC6sharedACvau : $@convention(thin) () -> Builtin.RawPointer {\nbb0:\n%0 = global_addr @$s14ViewController16SHNetworkManagerC6shared_Wz : $*Builtin.Word // user: %1\n%1 = address_to_pointer %0 : $*Builtin.Word to $Builtin.RawPointer // user: %3\n// function_ref one-time initialization function for shared\n//共享的一次性初始化函数\n%2 = function_ref @$s14ViewController16SHNetworkManagerC6shared_WZ : $@convention(c) () -> () // user: %3\n**//看这里的once** \n%3 = builtin \"once\"(%1 : $Builtin.RawPointer, %2 : $@convention(c) () -> ()) : $()\n%4 = global_addr @$s14ViewController16SHNetworkManagerC6sharedACvpZ : $*SHNetworkManager // user: %5\n%5 = address_to_pointer %4 : $*SHNetworkManager to $Builtin.RawPointer // user: %6\nreturn %5 : $Builtin.RawPointer                 // id: %6\n} // end sil function '$s14ViewController16SHNetworkManagerC6sharedACvau'\n\n```\n编译出ir代码，全局来查找once。\n\n```js\nswiftc -emit-ir ${SRCROOT}/LGSwiftTest/main.swift > ./main.ll && open main.ll\n```\n\n```js\ndefine swiftcc i8* @\"$s4main16SSNetWorkManagerC6sharedACvau\"() #0 {\n\nentry:\n\n  %0 = load i64, i64* @\"$s4main16SSNetWorkManagerC6shared_Wz\", align 8\n\n  %1 = icmp eq i64 %0, -1\n\n  %2 = call i1 @llvm.expect.i1(i1 %1, i1 true)\n\n  br i1 %2, label %once_done, label %once_not_done\n\nonce_done:                                        ; preds = %once_not_done, %entry\n\n  %3 = load i64, i64* @\"$s4main16SSNetWorkManagerC6shared_Wz\", align 8\n\n  %4 = icmp eq i64 %3, -1\n\n  call void @llvm.assume(i1 %4)\n\n  ret i8* bitcast (%T4main16SSNetWorkManagerC** @\"$s4main16SSNetWorkManagerC6sharedACvpZ\" to i8*)\n\nonce_not_done:                                    ; preds = %entry\n\n  call void @swift_once(i64* @\"$s4main16SSNetWorkManagerC6shared_Wz\", i8* bitcast (void ()* @\"$s4main16SSNetWorkManagerC6shared_WZ\" to i8*), i8* undef)\n\n  br label %once_done\n\n}\n```\n混写过后的方法`s14ViewController16SHNetworkManagerC6sharedACvau`，在sil代码中是`SHNetworkManager.shared.unsafeMutableAddressor`，下面有once_not_done，里面有swift_once，\n猜测它是一个swift内部的一个函数，在swift源码中搜索，在源码中**Once.cpp**中\n\n```\n/// Runs the given function with the given context argument exactly once.\n/// The predicate argument must point to a global or static variable of static\n/// extent of type swift_once_t.\nvoid swift::swift_once(swift_once_t *predicate, void (*fn)(void *),\n                       void *context) {\n#ifdef SWIFT_STDLIB_SINGLE_THREADED_RUNTIME\n  if (! *predicate) {\n    *predicate = true;\n    fn(context);\n  }\n#elif defined(__APPLE__)\n  dispatch_once_f(predicate, context, fn);\n#elif defined(__CYGWIN__)\n  _swift_once_f(predicate, context, fn);\n#else\n  std::call_once(*predicate, [fn, context]() { fn(context); });\n#endif\n}\n```\n如果等于 `__APPLE__`，会调用 `dispatch_once_f` 函数，就是 iOS 中 **GCD** 的函数。所以 Swift 中单例模式在底层中是和 OC 一样，都调用了 **GCD** 的函数。并且这个函数在执行一次后就不会在执行，以保证线程安全。\n\n# 属性在Mach-O中的位置\n类的方法是存放在VTable中。\nSwift类的本质是一个HeapObject的结构体指针，在HeapObject中有一个metadata，metadata中有一个Description成员变量，Description是名为TargeClassDescription的类，在TargetDescription中有一个VTable存储Swift类中的方法。\n那么Swift中类的属性又放在哪里呢，我们来看一个TatgetClassDescription的结构：它继承了两个类，这是抽出来的\n\n```js\nclass TargetClassDescriptor {\n    var flags: UInt32 4字节\n    var parent: UInt32\n    var name: Int32\n    var accessFunctionPointer: Int32\n    var fieldDescriptor: Int32\n    var superClassType: Int32\n    var metadataNegativeSizeInWords: UInt32\n    var metadataPositiveSizeInWords: UInt32\n    var numImmediateMembers: UInt32\n    var numFields: UInt32\n    var fieldOffsetVectorOffset: UInt32\n    var Offset: UInt32\n    // var size: UInt32\n    //V-Table\n}\n```\nSWift类的属性存放在fieldDescription中的，其源码定义在Metadata.h中的TargetTypeContextDescription类中，注意：**TatgetClassDescription**继承自**TargetTypeContextDescriptor**。\n源码定义如下：\n\n```js\n/// A pointer to the field descriptor for the type, if any.\nTargetRelativeDirectPointer<Runtime, const reflection::FieldDescriptor, /*nullable*/ true> Fields;\n```\n点进去看FieldDescription的结构大致如下：\n\n```js\n// Field descriptors contain a collection of field records for a single\n// class, struct or enum declaration.\nclass FieldDescriptor {\n  const FieldRecord *getFieldRecordBuffer() const {\n    return reinterpret_cast<const FieldRecord *>(this + 1);\n  }\n\npublic:\n  const RelativeDirectPointer<const char> MangledTypeName;\n  const RelativeDirectPointer<const char> Superclass;\n\n  FieldDescriptor() = delete;\n\n  const FieldDescriptorKind Kind;\n  const uint16_t FieldRecordSize;\n  const uint32_t NumFields;\n  \n  using const_iterator = FieldRecordIterator;\n```\n整理出来，FieldDescriptor的结构体大致如下：\n\n```js\nclass FieldDescriptor{\n    MangledTypeName int32\n    Superclass int32\n    Kind uint16\n    FieldRecordSize uint16\n    NumFields int32\n    //这个没有体现出来 便于理解写在下面 源码里是这个\n    //using const_iterator = FieldRecordIterator;\n    FieldRecords 【FiedlRecord】\n}\n```\n在FieldDescriptor中有这么几个方法：\n\n```js\n const_iterator begin() const {\n    auto Begin = getFieldRecordBuffer();\n    auto End = Begin + NumFields;\n    return const_iterator { Begin, End };\n  }\n\n  const_iterator end() const {\n    auto Begin = getFieldRecordBuffer();\n    auto End = Begin + NumFields;\n    return const_iterator { End, End };\n  }\n\n  llvm::ArrayRef<FieldRecord> getFields() const {\n    return {getFieldRecordBuffer(), NumFields};\n  }\n```\n从这三个方法可以看出这个是迭代器，const_iterator是FieldRecordIterator，其源码结构如下：\n\n```js\nstruct FieldRecordIterator {\n  const FieldRecord *Cur;\n  const FieldRecord * const End;\n\n  FieldRecordIterator(const FieldRecord *Cur, const FieldRecord * const End)\n    : Cur(Cur), End(End) {}\n\n  const FieldRecord &operator*() const {\n    return *Cur;\n  }\n\n  const FieldRecord *operator->() const {\n    return Cur;\n  }\n\n  FieldRecordIterator &operator++() {\n    ++Cur;\n    return *this;\n  }\n\n  bool operator==(const FieldRecordIterator &other) const {\n    return Cur == other.Cur && End == other.End;\n  }\n\n  bool operator!=(const FieldRecordIterator &other) const {\n    return !(*this == other);\n  }\n};\n\n```\n成员变量为FieldRecord，我们来看一下它在源码的结构：\n\n```js\nclass FieldRecord {\n  const FieldRecordFlags Flags;\n\npublic:\n  const RelativeDirectPointer<const char> MangledTypeName;\n  const RelativeDirectPointer<const char> FieldName;\n\n  FieldRecord() = delete;\n\n  bool hasMangledTypeName() const {\n    return MangledTypeName;\n  }\n\n  StringRef getMangledTypeName() const {\n    return Demangle::makeSymbolicMangledNameStringRef(MangledTypeName.get());\n  }\n\n  StringRef getFieldName() const {\n    return FieldName.get();\n  }\n\n  bool isIndirectCase() const {\n    return Flags.isIndirectCase();\n  }\n\n  bool isVar() const {\n    return Flags.isVar();\n  }\n}\n```\n他有三个成员变量：Flags,MangledTypeName,FieldName.Flags不用管，MangledTypeName为它的类型信息，FieldName是它的属性的名称信息。\n到这里，我们基本可以确定属性存储在底层源码的结构以及位置，我们的查找流程如下：\n\n- 找到**HeapObject**。\n- 从**HeapObject**中找到**HeapMetaData**。\n- 继续跟进，**HeapMetadata**为 **TargetHeapMetadata**的别名\n- 找到**TargetHeapMetadata**结构体，找到**TargetClassDescriptor**，然后找到**TargetTypeContextDescriptor**，并且找到了**Fields**成员变量。\n- 通过Fields找到了**FieldDescriptor**的定义，并且找到其中的**FieldRecords**，\n- 通过迭代器**FieldRecodIterator**，找到了**FieldRecord**。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Swift第一节课属性","published":1,"updated":"2022-09-02T01:07:54.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7js3k8y0000x7ut62f6f82b","content":"<hr>\n<p>highlight: a11y-dark<br>theme: channing-cyan</p>\n<hr>\n<p>Swift中属性可分为两大类：存储属性（Stored Property），计算属性（Computed Property）。</p>\n<h1 id=\"存储属性\"><a href=\"#存储属性\" class=\"headerlink\" title=\"存储属性\"></a><strong>存储属性</strong></h1><p>存储属性是一个作为类和结构体实例的一部分的常量或变量。存储要么是是变量存储属性（var声明变量，可在将来设置为不同的值）要么是常量存储属性（let声明常量，常量的值一旦设置好不能再被更改），存储属性可以说是类或结构体的成员变量，因为它和类或结构体的内存结构有关。</p>\n<p><strong>let和var的对比</strong><br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0518fdeb35245de86d5020e6028d7b6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br><strong>汇编分析两者</strong></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c3c9e38ed5a4539a13049f8b5d3f747~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>汇编代码看没有区别，都是将值存储到了寄存器中</p>\n<p><strong>lldb调试查看内存</strong><br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/532d9fb60df949e3b0e6385579d766e5~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>看到，x,y 在相邻的内存区域，连续的，都在__DATA.__common这个区域</p>\n<p><strong>sil分析</strong><br>var get set<br>let get</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@_hasStorage @_hasInitialValue var x: Int { get set }</span><br><span class=\"line\">@_hasStorage @_hasInitialValue let y: Int { get }</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a><strong>计算属性</strong></h1><p>类、结构体、枚举都能够定义计算属性，但计算属性并不存储值，他们提供了setter和getter方法来修改和获取值。对于存储属性来说可以是常量或者变量，但对于计算属性必须定义为变量。与此同时我们书写计算属性时鼻血包含类型，因为编译器需要知道期望返回值是什么。</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">**</span><span class=\"keyword\">struct</span>** <span class=\"title class_\">square</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; <span class=\"comment\">//实例中占据内存</span></span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; <span class=\"operator\">**</span><span class=\"keyword\">var</span><span class=\"operator\">**</span> width : <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; <span class=\"comment\">//不占用内存</span></span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; <span class=\"operator\">**</span><span class=\"keyword\">var</span><span class=\"operator\">**</span> area:<span class=\"type\">Double</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"operator\">**</span><span class=\"keyword\">get</span><span class=\"operator\">**</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"operator\">**</span><span class=\"keyword\">return</span><span class=\"operator\">**</span> width <span class=\"operator\">*</span> width</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; &nbsp; &nbsp; }<span class=\"operator\">**</span><span class=\"keyword\">set</span><span class=\"operator\">**</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"operator\">**</span><span class=\"keyword\">self</span><span class=\"operator\">**</span>.width <span class=\"operator\">=</span> newValue</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; &nbsp; &nbsp; }</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; &nbsp; }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">\\</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span><span class=\"keyword\">var</span><span class=\"operator\">**</span> s <span class=\"operator\">=</span> square(width: <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s.area <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s.area)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"end\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n<p>s.area的本质是调用方法，我们将上面的代码转为sil文件</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">square</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"meta\">@_hasStorage</span> <span class=\"keyword\">var</span> width: <span class=\"type\">Double</span> { <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> { <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"keyword\">init</span>(<span class=\"params\">width</span>: <span class=\"type\">Double</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>可以看到area是没有hasStorage存储属性的，但width是有存储属性的，但是他们都有get和set方法，顾名思义可知，他们之间最大的差别就是一个可以记录存储值，一个仅仅调用set和get方法但并不存储该属性的值。</p>\n<p>我们变换一下代码，我们将存储属性area的set方法私有化，并且定义一个height，我们将代码转换成sil文件看看区别：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92dcaa4d33914ba9bf77081d3504ece9~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>sil文件可以看到area是一个存储属性，set方法不能调用</p>\n<p>总结：计算属性本质就是调用set和get方法。</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">square</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"meta\">@_hasStorage</span> <span class=\"keyword\">var</span> width: <span class=\"type\">Double</span> { <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"meta\">@_hasStorage</span> <span class=\"meta\">@_hasInitialValue</span> <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> { <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"meta\">@_hasStorage</span> <span class=\"meta\">@_hasInitialValue</span> <span class=\"keyword\">let</span> height: <span class=\"type\">Double</span> { <span class=\"keyword\">get</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"keyword\">func</span> <span class=\"title function_\">test</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"keyword\">init</span>(<span class=\"params\">width</span>: <span class=\"type\">Double</span>, <span class=\"params\">area</span>: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">40.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"属性观察者\"><a href=\"#属性观察者\" class=\"headerlink\" title=\"属性观察者\"></a><strong>属性观察者</strong></h1><ul>\n<li>属性观察者用来观察属性值的变化，一个willSet再当属性将改变调用，即使这个值与原来的值相同，而didSet在属性已经改变之后调用。他们的语法类似于getter和setter</li>\n<li>willSet会传递新值，默认叫newvalue，didset会传递旧值，默认叫oldVlaue。</li>\n<li>在初始化器中设置属性值不会触发willSet和didSet，在属性定义设置初始值时也不会触发willSet和didSet。</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbdc35be13bb4f79abb4f82e5b459e47~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChatf944604070cbad33664ed5d60169e204.png\"></p>\n<p> 属性观察者在继承关系下的调用顺序<br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a170c5772aa4634848d22f798c639fe~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>调用顺序：子类&nbsp;<code>willSet</code>&nbsp;-&gt; 父类&nbsp;<code>willSet</code>&nbsp;-&gt; 父类&nbsp;<code>didSet</code>&nbsp;-&gt; 子类&nbsp;<code>didSet</code>。<br>全局变量和局部变量也可以使用属性观察器。</p>\n<h1 id=\"延迟存储属性\"><a href=\"#延迟存储属性\" class=\"headerlink\" title=\"延迟存储属性\"></a><strong>延迟存储属性</strong></h1><figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>{</span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> age : <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">18</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">var</span> s <span class=\"operator\">=</span> <span class=\"type\">Subject</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s.age)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/463de7af01294c0b986f5e1b27ac5393~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>sil文件查看结构</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> { <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"meta\">@_hasStorage</span> <span class=\"meta\">@_hasInitialValue</span> <span class=\"keyword\">final</span> <span class=\"keyword\">var</span> <span class=\"variable\">$__lazy_storage_</span><span class=\"variable\">$_age</span>: <span class=\"type\">Int</span>? { <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"keyword\">@objc</span> <span class=\"keyword\">deinit</span></span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; <span class=\"keyword\">init</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>可以看到lazy修饰的age变成了一个<code>_age: Int? { get set }</code>可选类型，可选类型默认初始化为nil。延迟存储属性并不是线程安全的</p>\n<h1 id=\"类型属性-Type-Property\"><a href=\"#类型属性-Type-Property\" class=\"headerlink\" title=\"类型属性(Type Property)\"></a><strong>类型属性(Type Property)</strong></h1><p>属性可以分为实例属性（instance Property）和类型属性（Type Property）。</p>\n<h3 id=\"1。实例属性\"><a href=\"#1。实例属性\" class=\"headerlink\" title=\"1。实例属性\"></a>1。实例属性</h3><p>存储实例属性（stored Instance Property）：存储在实例的内存中，每个实例都有一份。<br>计算实例属性（computed Instance Property）：<br>实例属性只能通过实例去访问，在上面所讲的属性都属于实例属性。</p>\n<h3 id=\"2-类型属性\"><a href=\"#2-类型属性\" class=\"headerlink\" title=\"2.类型属性\"></a>2.类型属性</h3><ul>\n<li>存储类型属性（Stored Type Property）：整个程序运行过程中，就只有一份内存（类似于全局变量）。</li>\n<li>计算类型属性（Computed Type Property）</li>\n<li>可以通过static定义类型属性，如果是类，也可以用关键字class。<br>类型属性，只能通过类型去访问。在结构体中定义一个属性，可以通过static来修饰。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">**</span><span class=\"keyword\">struct</span>** <span class=\"title class_\">Car</span> {</span><br><span class=\"line\">&nbsp; &nbsp; <span class=\"operator\">**</span><span class=\"keyword\">static</span><span class=\"operator\">**</span> <span class=\"operator\">**</span><span class=\"keyword\">var</span><span class=\"operator\">**</span> count:<span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"type\">Car</span>.count <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>不同于存储实例属性，你必须给存储类型属性定义初始值，因为类型没有实例那样的init初始化器取初始化值。</li>\n<li>存储类型属性默认就是lazy，会在第一次使用的时候才初始化，就算被多个线程访问，也能保证只会初始化一次。</li>\n<li>存储类型属性可以是let。</li>\n<li>枚举类型也可以定义类型属性（存储、计算）</li>\n</ul>\n<h3 id=\"3-单例模式\"><a href=\"#3-单例模式\" class=\"headerlink\" title=\"3.单例模式\"></a>3.单例模式</h3><p>在oc中设计单例模式代码大致</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+（SSnetWorkManager *）sharedManger;</span><br><span class=\"line\">+ (SSnetWorkManager *)sharedManger{</span><br><span class=\"line\">    static SSnetWorkManager *instance = nil;</span><br><span class=\"line\">    static dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(&amp;onceToken,^{</span><br><span class=\"line\">        instance = [SSnetWorkManager alloc]init];</span><br><span class=\"line\">    });</span><br><span class=\"line\">    </span><br><span class=\"line\">    return instance;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>在Swift中设计的单例代码如下</p>\n<figure class=\"highlight swift\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SSNetWorkManager</span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">SSNetWorkManager</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>(){}</span><br><span class=\"line\">}</span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SSSNetWorkManager</span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">SSSNetWorkManager</span>()</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>(){}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>在初始化器 <code>init</code> 前用 <code>private</code> 修饰，可以将被修饰的初始化器进行私有，外部访问只能通过 shared 来进行访问。</p>\n<p>在 OC 中，我们在设计单例模式的时候，为了保证线程安全，通常会配合 <code>dispatch_once</code> 来创建实例，以保证单例对象在内存中只有一份。但在写 <code>Swift</code> 的单例的时候，并不需要写 <code>dispatch_once</code> 来配合创建实例，那 Swift 的单例是如何保证线程安全的呢？请往下看。</p>\n<h4 id=\"Swift单例模式的本质\"><a href=\"#Swift单例模式的本质\" class=\"headerlink\" title=\"Swift单例模式的本质\"></a>Swift单例模式的本质</h4><p>编译后的sil代码</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@_hasMissingDesignatedInitializers public <span class=\"keyword\">class</span> <span class=\"title class_\">SHNetworkManager</span> {</span><br><span class=\"line\">    @_hasStorage @_hasInitialValue public <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> <span class=\"attr\">shared</span>: <span class=\"title class_\">SHNetworkManager</span> { get }</span><br><span class=\"line\">    private <span class=\"title function_\">init</span>()</span><br><span class=\"line\">    @objc deinit</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>getter实现</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// static SHNetworkManager.shared.getter</span></span><br><span class=\"line\">sil [transparent] @$s14ViewController16SHNetworkManagerC6sharedACvgZ : $@<span class=\"title function_\">convention</span>(method) (@thick <span class=\"title class_\">SHNetworkManager</span>.<span class=\"property\">Type</span>) -&gt; @owned <span class=\"title class_\">SHNetworkManager</span> {</span><br><span class=\"line\">    <span class=\"comment\">// %0 \"self\"                                      // user: %1</span></span><br><span class=\"line\">    <span class=\"title function_\">bb0</span>(%<span class=\"number\">0</span> : $@thick <span class=\"title class_\">SHNetworkManager</span>.<span class=\"property\">Type</span>):</span><br><span class=\"line\">    debug_value %<span class=\"number\">0</span> : $@thick <span class=\"title class_\">SHNetworkManager</span>.<span class=\"property\">Type</span>, <span class=\"keyword\">let</span>, name <span class=\"string\">\"self\"</span>, argno <span class=\"number\">1</span> <span class=\"comment\">// id: %1</span></span><br><span class=\"line\">    <span class=\"comment\">// function_ref SHNetworkManager.shared.unsafeMutableAddressor 看这里</span></span><br><span class=\"line\">    %<span class=\"number\">2</span> = function_ref @$s14ViewController16SHNetworkManagerC6sharedACvau : $@<span class=\"title function_\">convention</span>(thin) () -&gt; <span class=\"title class_\">Builtin</span>.<span class=\"property\">RawPointer</span> <span class=\"comment\">// user: %3</span></span><br><span class=\"line\">    %<span class=\"number\">3</span> = apply %<span class=\"number\">2</span>() : $@<span class=\"title function_\">convention</span>(thin) () -&gt; <span class=\"title class_\">Builtin</span>.<span class=\"property\">RawPointer</span> <span class=\"comment\">// user: %4</span></span><br><span class=\"line\">    %<span class=\"number\">4</span> = pointer_to_address %<span class=\"number\">3</span> : $Builtin.<span class=\"property\">RawPointer</span> to [strict] $*<span class=\"title class_\">SHNetworkManager</span> <span class=\"comment\">// user: %5</span></span><br><span class=\"line\">    %<span class=\"number\">5</span> = load %<span class=\"number\">4</span> : $*<span class=\"title class_\">SHNetworkManager</span>               <span class=\"comment\">// users: %7, %6</span></span><br><span class=\"line\">    strong_retain %<span class=\"number\">5</span> : $SHNetworkManager            <span class=\"comment\">// id: %6</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> %<span class=\"number\">5</span> : $SHNetworkManager                   <span class=\"comment\">// id: %7</span></span><br><span class=\"line\">} <span class=\"comment\">// end sil function '$s14ViewController16SHNetworkManagerC6sharedACvgZ'</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>在 getter 中，调用了一个&nbsp;<code>unsafeMutableAddressor</code>&nbsp;方法，<code>unsafeMutableAddressor</code>&nbsp;的实现如下：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>SHNetworkManager.shared.unsafeMutableAddressor</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sil [global_init] @$s14ViewController16SHNetworkManagerC6sharedACvau : $@convention(thin) () -&gt; Builtin.RawPointer {</span><br><span class=\"line\">bb0:</span><br><span class=\"line\">%0 = global_addr @$s14ViewController16SHNetworkManagerC6shared_Wz : $*Builtin.Word // user: %1</span><br><span class=\"line\">%1 = address_to_pointer %0 : $*Builtin.Word to $Builtin.RawPointer // user: %3</span><br><span class=\"line\">// function_ref one-time initialization function for shared</span><br><span class=\"line\">//共享的一次性初始化函数</span><br><span class=\"line\">%2 = function_ref @$s14ViewController16SHNetworkManagerC6shared_WZ : $@convention(c) () -&gt; () // user: %3</span><br><span class=\"line\">**//看这里的once** </span><br><span class=\"line\">%3 = builtin \"once\"(%1 : $Builtin.RawPointer, %2 : $@convention(c) () -&gt; ()) : $()</span><br><span class=\"line\">%4 = global_addr @$s14ViewController16SHNetworkManagerC6sharedACvpZ : $*SHNetworkManager // user: %5</span><br><span class=\"line\">%5 = address_to_pointer %4 : $*SHNetworkManager to $Builtin.RawPointer // user: %6</span><br><span class=\"line\">return %5 : $Builtin.RawPointer                 // id: %6</span><br><span class=\"line\">} // end sil function '$s14ViewController16SHNetworkManagerC6sharedACvau'</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>编译出ir代码，全局来查找once。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swiftc -emit-ir ${<span class=\"variable constant_\">SRCROOT</span>}/<span class=\"title class_\">LGSwiftTest</span>/main.<span class=\"property\">swift</span> &gt; ./main.<span class=\"property\">ll</span> &amp;&amp; open main.<span class=\"property\">ll</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define swiftcc i8* @<span class=\"string\">\"$s4main16SSNetWorkManagerC6sharedACvau\"</span>() #<span class=\"number\">0</span> {</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">entry</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; %<span class=\"number\">0</span> = load i64, i64* @<span class=\"string\">\"$s4main16SSNetWorkManagerC6shared_Wz\"</span>, align <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; %<span class=\"number\">1</span> = icmp eq i64 %<span class=\"number\">0</span>, -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; %<span class=\"number\">2</span> = call i1 @llvm.<span class=\"property\">expect</span>.<span class=\"title function_\">i1</span>(i1 %<span class=\"number\">1</span>, i1 <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; br i1 %<span class=\"number\">2</span>, label %once_done, label %once_not_done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">once_done</span>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; preds = %once_not_done, %entry</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; %<span class=\"number\">3</span> = load i64, i64* @<span class=\"string\">\"$s4main16SSNetWorkManagerC6shared_Wz\"</span>, align <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; %<span class=\"number\">4</span> = icmp eq i64 %<span class=\"number\">3</span>, -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; call <span class=\"keyword\">void</span> @llvm.<span class=\"title function_\">assume</span>(i1 %<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; ret i8* bitcast (%T4main16SSNetWorkManagerC** @<span class=\"string\">\"$s4main16SSNetWorkManagerC6sharedACvpZ\"</span> to i8*)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">once_not_done</span>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ; preds = %entry</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; call <span class=\"keyword\">void</span> @<span class=\"title function_\">swift_once</span>(i64* @<span class=\"string\">\"$s4main16SSNetWorkManagerC6shared_Wz\"</span>, i8* bitcast (<span class=\"keyword\">void</span> ()* @<span class=\"string\">\"$s4main16SSNetWorkManagerC6shared_WZ\"</span> to i8*), i8* undef)</span><br><span class=\"line\"></span><br><span class=\"line\">&nbsp; br label %once_done</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>混写过后的方法<code>s14ViewController16SHNetworkManagerC6sharedACvau</code>，在sil代码中是<code>SHNetworkManager.shared.unsafeMutableAddressor</code>，下面有once_not_done，里面有swift_once，<br>猜测它是一个swift内部的一个函数，在swift源码中搜索，在源码中<strong>Once.cpp</strong>中</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Runs the given function with the given context argument exactly once.</span><br><span class=\"line\">/// The predicate argument must point to a global or static variable of static</span><br><span class=\"line\">/// extent of type swift_once_t.</span><br><span class=\"line\">void swift::swift_once(swift_once_t *predicate, void (*fn)(void *),</span><br><span class=\"line\">                       void *context) {</span><br><span class=\"line\">#ifdef SWIFT_STDLIB_SINGLE_THREADED_RUNTIME</span><br><span class=\"line\">  if (! *predicate) {</span><br><span class=\"line\">    *predicate = true;</span><br><span class=\"line\">    fn(context);</span><br><span class=\"line\">  }</span><br><span class=\"line\">#elif defined(__APPLE__)</span><br><span class=\"line\">  dispatch_once_f(predicate, context, fn);</span><br><span class=\"line\">#elif defined(__CYGWIN__)</span><br><span class=\"line\">  _swift_once_f(predicate, context, fn);</span><br><span class=\"line\">#else</span><br><span class=\"line\">  std::call_once(*predicate, [fn, context]() { fn(context); });</span><br><span class=\"line\">#endif</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>如果等于 <code>__APPLE__</code>，会调用 <code>dispatch_once_f</code> 函数，就是 iOS 中 <strong>GCD</strong> 的函数。所以 Swift 中单例模式在底层中是和 OC 一样，都调用了 <strong>GCD</strong> 的函数。并且这个函数在执行一次后就不会在执行，以保证线程安全。</p>\n<h1 id=\"属性在Mach-O中的位置\"><a href=\"#属性在Mach-O中的位置\" class=\"headerlink\" title=\"属性在Mach-O中的位置\"></a>属性在Mach-O中的位置</h1><p>类的方法是存放在VTable中。<br>Swift类的本质是一个HeapObject的结构体指针，在HeapObject中有一个metadata，metadata中有一个Description成员变量，Description是名为TargeClassDescription的类，在TargetDescription中有一个VTable存储Swift类中的方法。<br>那么Swift中类的属性又放在哪里呢，我们来看一个TatgetClassDescription的结构：它继承了两个类，这是抽出来的</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TargetClassDescriptor</span> {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">flags</span>: <span class=\"title class_\">UInt32</span> <span class=\"number\">4</span>字节</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">parent</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">name</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">accessFunctionPointer</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">fieldDescriptor</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">superClassType</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">metadataNegativeSizeInWords</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">metadataPositiveSizeInWords</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">numImmediateMembers</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">numFields</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">fieldOffsetVectorOffset</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"title class_\">Offset</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"comment\">// var size: UInt32</span></span><br><span class=\"line\">    <span class=\"comment\">//V-Table</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>SWift类的属性存放在fieldDescription中的，其源码定义在Metadata.h中的TargetTypeContextDescription类中，注意：<strong>TatgetClassDescription</strong>继承自<strong>TargetTypeContextDescriptor</strong>。<br>源码定义如下：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// A pointer to the field descriptor for the type, if any.</span></span><br><span class=\"line\"><span class=\"title class_\">TargetRelativeDirectPointer</span>&lt;<span class=\"title class_\">Runtime</span>, <span class=\"keyword\">const</span> <span class=\"attr\">reflection</span>::<span class=\"title class_\">FieldDescriptor</span>, <span class=\"comment\">/*nullable*/</span> <span class=\"literal\">true</span>&gt; <span class=\"title class_\">Fields</span>;</span><br></pre></td></tr></tbody></table></figure>\n<p>点进去看FieldDescription的结构大致如下：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Field descriptors contain a collection of field records for a single</span></span><br><span class=\"line\"><span class=\"comment\">// class, struct or enum declaration.</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FieldDescriptor</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *<span class=\"title function_\">getFieldRecordBuffer</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reinterpret_cast&lt;<span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *&gt;(<span class=\"variable language_\">this</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">RelativeDirectPointer</span>&lt;<span class=\"keyword\">const</span> char&gt; <span class=\"title class_\">MangledTypeName</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">RelativeDirectPointer</span>&lt;<span class=\"keyword\">const</span> char&gt; <span class=\"title class_\">Superclass</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FieldDescriptor</span>() = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldDescriptorKind</span> <span class=\"title class_\">Kind</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uint16_t <span class=\"title class_\">FieldRecordSize</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uint32_t <span class=\"title class_\">NumFields</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  using const_iterator = <span class=\"title class_\">FieldRecordIterator</span>;</span><br></pre></td></tr></tbody></table></figure>\n<p>整理出来，FieldDescriptor的结构体大致如下：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FieldDescriptor</span>{</span><br><span class=\"line\">    <span class=\"title class_\">MangledTypeName</span> int32</span><br><span class=\"line\">    <span class=\"title class_\">Superclass</span> int32</span><br><span class=\"line\">    <span class=\"title class_\">Kind</span> uint16</span><br><span class=\"line\">    <span class=\"title class_\">FieldRecordSize</span> uint16</span><br><span class=\"line\">    <span class=\"title class_\">NumFields</span> int32</span><br><span class=\"line\">    <span class=\"comment\">//这个没有体现出来 便于理解写在下面 源码里是这个</span></span><br><span class=\"line\">    <span class=\"comment\">//using const_iterator = FieldRecordIterator;</span></span><br><span class=\"line\">    <span class=\"title class_\">FieldRecords</span> 【<span class=\"title class_\">FiedlRecord</span>】</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>在FieldDescriptor中有这么几个方法：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const_iterator <span class=\"title function_\">begin</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">   auto <span class=\"title class_\">Begin</span> = <span class=\"title function_\">getFieldRecordBuffer</span>();</span><br><span class=\"line\">   auto <span class=\"title class_\">End</span> = <span class=\"title class_\">Begin</span> + <span class=\"title class_\">NumFields</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> const_iterator { <span class=\"title class_\">Begin</span>, <span class=\"title class_\">End</span> };</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> const_iterator <span class=\"title function_\">end</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">   auto <span class=\"title class_\">Begin</span> = <span class=\"title function_\">getFieldRecordBuffer</span>();</span><br><span class=\"line\">   auto <span class=\"title class_\">End</span> = <span class=\"title class_\">Begin</span> + <span class=\"title class_\">NumFields</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> const_iterator { <span class=\"title class_\">End</span>, <span class=\"title class_\">End</span> };</span><br><span class=\"line\"> }</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">llvm</span>::<span class=\"title class_\">ArrayRef</span>&lt;<span class=\"title class_\">FieldRecord</span>&gt; <span class=\"title function_\">getFields</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">   <span class=\"keyword\">return</span> {<span class=\"title function_\">getFieldRecordBuffer</span>(), <span class=\"title class_\">NumFields</span>};</span><br><span class=\"line\"> }</span><br></pre></td></tr></tbody></table></figure>\n<p>从这三个方法可以看出这个是迭代器，const_iterator是FieldRecordIterator，其源码结构如下：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct <span class=\"title class_\">FieldRecordIterator</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *<span class=\"title class_\">Cur</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> * <span class=\"keyword\">const</span> <span class=\"title class_\">End</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FieldRecordIterator</span>(<span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *<span class=\"title class_\">Cur</span>, <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> * <span class=\"keyword\">const</span> <span class=\"title class_\">End</span>)</span><br><span class=\"line\">    : <span class=\"title class_\">Cur</span>(<span class=\"title class_\">Cur</span>), <span class=\"title class_\">End</span>(<span class=\"title class_\">End</span>) {}</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> &amp;operator*() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"title class_\">Cur</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *operator-&gt;() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Cur</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FieldRecordIterator</span> &amp;operator++() {</span><br><span class=\"line\">    ++<span class=\"title class_\">Cur</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  bool operator==(<span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecordIterator</span> &amp;other) <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Cur</span> == other.<span class=\"property\">Cur</span> &amp;&amp; <span class=\"title class_\">End</span> == other.<span class=\"property\">End</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  bool operator!=(<span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecordIterator</span> &amp;other) <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(*<span class=\"variable language_\">this</span> == other);</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>成员变量为FieldRecord，我们来看一下它在源码的结构：</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FieldRecord</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecordFlags</span> <span class=\"title class_\">Flags</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">RelativeDirectPointer</span>&lt;<span class=\"keyword\">const</span> char&gt; <span class=\"title class_\">MangledTypeName</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">RelativeDirectPointer</span>&lt;<span class=\"keyword\">const</span> char&gt; <span class=\"title class_\">FieldName</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FieldRecord</span>() = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  bool <span class=\"title function_\">hasMangledTypeName</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">MangledTypeName</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">StringRef</span> <span class=\"title function_\">getMangledTypeName</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Demangle</span>::<span class=\"title function_\">makeSymbolicMangledNameStringRef</span>(<span class=\"title class_\">MangledTypeName</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">StringRef</span> <span class=\"title function_\">getFieldName</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">FieldName</span>.<span class=\"title function_\">get</span>();</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  bool <span class=\"title function_\">isIndirectCase</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Flags</span>.<span class=\"title function_\">isIndirectCase</span>();</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  bool <span class=\"title function_\">isVar</span>() <span class=\"keyword\">const</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Flags</span>.<span class=\"title function_\">isVar</span>();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>他有三个成员变量：Flags,MangledTypeName,FieldName.Flags不用管，MangledTypeName为它的类型信息，FieldName是它的属性的名称信息。<br>到这里，我们基本可以确定属性存储在底层源码的结构以及位置，我们的查找流程如下：</p>\n<ul>\n<li>找到<strong>HeapObject</strong>。</li>\n<li>从<strong>HeapObject</strong>中找到<strong>HeapMetaData</strong>。</li>\n<li>继续跟进，<strong>HeapMetadata</strong>为 <strong>TargetHeapMetadata</strong>的别名</li>\n<li>找到<strong>TargetHeapMetadata</strong>结构体，找到<strong>TargetClassDescriptor</strong>，然后找到<strong>TargetTypeContextDescriptor</strong>，并且找到了<strong>Fields</strong>成员变量。</li>\n<li>通过Fields找到了<strong>FieldDescriptor</strong>的定义，并且找到其中的<strong>FieldRecords</strong>，</li>\n<li>通过迭代器<strong>FieldRecodIterator</strong>，找到了<strong>FieldRecord</strong>。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>highlight: a11y-dark<br>theme: channing-cyan</p>\n<hr>\n<p>Swift中属性可分为两大类：存储属性（Stored Property），计算属性（Computed Property）。</p>\n<h1 id=\"存储属性\"><a href=\"#存储属性\" class=\"headerlink\" title=\"存储属性\"></a><strong>存储属性</strong></h1><p>存储属性是一个作为类和结构体实例的一部分的常量或变量。存储要么是是变量存储属性（var声明变量，可在将来设置为不同的值）要么是常量存储属性（let声明常量，常量的值一旦设置好不能再被更改），存储属性可以说是类或结构体的成员变量，因为它和类或结构体的内存结构有关。</p>\n<p><strong>let和var的对比</strong><br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0518fdeb35245de86d5020e6028d7b6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br><strong>汇编分析两者</strong></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c3c9e38ed5a4539a13049f8b5d3f747~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>汇编代码看没有区别，都是将值存储到了寄存器中</p>\n<p><strong>lldb调试查看内存</strong><br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/532d9fb60df949e3b0e6385579d766e5~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>看到，x,y 在相邻的内存区域，连续的，都在__DATA.__common这个区域</p>\n<p><strong>sil分析</strong><br>var get set<br>let get</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@_hasStorage @_hasInitialValue var x: Int &#123; get set &#125;</span><br><span class=\"line\">@_hasStorage @_hasInitialValue let y: Int &#123; get &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a><strong>计算属性</strong></h1><p>类、结构体、枚举都能够定义计算属性，但计算属性并不存储值，他们提供了setter和getter方法来修改和获取值。对于存储属性来说可以是常量或者变量，但对于计算属性必须定义为变量。与此同时我们书写计算属性时鼻血包含类型，因为编译器需要知道期望返回值是什么。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">**</span><span class=\"keyword\">struct</span>** <span class=\"title class_\">square</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实例中占据内存</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"operator\">**</span><span class=\"keyword\">var</span><span class=\"operator\">**</span> width : <span class=\"type\">Double</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//不占用内存</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"operator\">**</span><span class=\"keyword\">var</span><span class=\"operator\">**</span> area:<span class=\"type\">Double</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"operator\">**</span><span class=\"keyword\">get</span><span class=\"operator\">**</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"operator\">**</span><span class=\"keyword\">return</span><span class=\"operator\">**</span> width <span class=\"operator\">*</span> width</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"operator\">**</span><span class=\"keyword\">set</span><span class=\"operator\">**</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"operator\">**</span><span class=\"keyword\">self</span><span class=\"operator\">**</span>.width <span class=\"operator\">=</span> newValue</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">**</span><span class=\"keyword\">var</span><span class=\"operator\">**</span> s <span class=\"operator\">=</span> square(width: <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">s.area <span class=\"operator\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(s.area)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>s.area的本质是调用方法，我们将上面的代码转为sil文件</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">square</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@_hasStorage</span> <span class=\"keyword\">var</span> width: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"params\">width</span>: <span class=\"type\">Double</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到area是没有hasStorage存储属性的，但width是有存储属性的，但是他们都有get和set方法，顾名思义可知，他们之间最大的差别就是一个可以记录存储值，一个仅仅调用set和get方法但并不存储该属性的值。</p>\n<p>我们变换一下代码，我们将存储属性area的set方法私有化，并且定义一个height，我们将代码转换成sil文件看看区别：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92dcaa4d33914ba9bf77081d3504ece9~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>sil文件可以看到area是一个存储属性，set方法不能调用</p>\n<p>总结：计算属性本质就是调用set和get方法。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">square</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@_hasStorage</span> <span class=\"keyword\">var</span> width: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@_hasStorage</span> <span class=\"meta\">@_hasInitialValue</span> <span class=\"keyword\">private(set)</span> <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@_hasStorage</span> <span class=\"meta\">@_hasInitialValue</span> <span class=\"keyword\">let</span> height: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">func</span> <span class=\"title function_\">test</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>(<span class=\"params\">width</span>: <span class=\"type\">Double</span>, <span class=\"params\">area</span>: <span class=\"type\">Double</span> <span class=\"operator\">=</span> <span class=\"number\">40.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"属性观察者\"><a href=\"#属性观察者\" class=\"headerlink\" title=\"属性观察者\"></a><strong>属性观察者</strong></h1><ul>\n<li>属性观察者用来观察属性值的变化，一个willSet再当属性将改变调用，即使这个值与原来的值相同，而didSet在属性已经改变之后调用。他们的语法类似于getter和setter</li>\n<li>willSet会传递新值，默认叫newvalue，didset会传递旧值，默认叫oldVlaue。</li>\n<li>在初始化器中设置属性值不会触发willSet和didSet，在属性定义设置初始值时也不会触发willSet和didSet。</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbdc35be13bb4f79abb4f82e5b459e47~tplv-k3u1fbpfcp-watermark.image\" alt=\"WeChatf944604070cbad33664ed5d60169e204.png\"></p>\n<p> 属性观察者在继承关系下的调用顺序<br><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a170c5772aa4634848d22f798c639fe~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>调用顺序：子类 <code>willSet</code> -&gt; 父类 <code>willSet</code> -&gt; 父类 <code>didSet</code> -&gt; 子类 <code>didSet</code>。<br>全局变量和局部变量也可以使用属性观察器。</p>\n<h1 id=\"延迟存储属性\"><a href=\"#延迟存储属性\" class=\"headerlink\" title=\"延迟存储属性\"></a><strong>延迟存储属性</strong></h1><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> age : <span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s <span class=\"operator\">=</span> <span class=\"type\">Subject</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s.age)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/463de7af01294c0b986f5e1b27ac5393~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"><br>sil文件查看结构</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">lazy</span> <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@_hasStorage</span> <span class=\"meta\">@_hasInitialValue</span> <span class=\"keyword\">final</span> <span class=\"keyword\">var</span> <span class=\"variable\">$__lazy_storage_</span><span class=\"variable\">$_age</span>: <span class=\"type\">Int</span>? &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">@objc</span> <span class=\"keyword\">deinit</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">init</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到lazy修饰的age变成了一个<code>_age: Int? &#123; get set &#125;</code>可选类型，可选类型默认初始化为nil。延迟存储属性并不是线程安全的</p>\n<h1 id=\"类型属性-Type-Property\"><a href=\"#类型属性-Type-Property\" class=\"headerlink\" title=\"类型属性(Type Property)\"></a><strong>类型属性(Type Property)</strong></h1><p>属性可以分为实例属性（instance Property）和类型属性（Type Property）。</p>\n<h3 id=\"1。实例属性\"><a href=\"#1。实例属性\" class=\"headerlink\" title=\"1。实例属性\"></a>1。实例属性</h3><p>存储实例属性（stored Instance Property）：存储在实例的内存中，每个实例都有一份。<br>计算实例属性（computed Instance Property）：<br>实例属性只能通过实例去访问，在上面所讲的属性都属于实例属性。</p>\n<h3 id=\"2-类型属性\"><a href=\"#2-类型属性\" class=\"headerlink\" title=\"2.类型属性\"></a>2.类型属性</h3><ul>\n<li>存储类型属性（Stored Type Property）：整个程序运行过程中，就只有一份内存（类似于全局变量）。</li>\n<li>计算类型属性（Computed Type Property）</li>\n<li>可以通过static定义类型属性，如果是类，也可以用关键字class。<br>类型属性，只能通过类型去访问。在结构体中定义一个属性，可以通过static来修饰。</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">**</span><span class=\"keyword\">struct</span>** <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"operator\">**</span><span class=\"keyword\">static</span><span class=\"operator\">**</span> <span class=\"operator\">**</span><span class=\"keyword\">var</span><span class=\"operator\">**</span> count:<span class=\"type\">Int</span> <span class=\"operator\">=</span> <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">Car</span>.count <span class=\"operator\">=</span> <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>不同于存储实例属性，你必须给存储类型属性定义初始值，因为类型没有实例那样的init初始化器取初始化值。</li>\n<li>存储类型属性默认就是lazy，会在第一次使用的时候才初始化，就算被多个线程访问，也能保证只会初始化一次。</li>\n<li>存储类型属性可以是let。</li>\n<li>枚举类型也可以定义类型属性（存储、计算）</li>\n</ul>\n<h3 id=\"3-单例模式\"><a href=\"#3-单例模式\" class=\"headerlink\" title=\"3.单例模式\"></a>3.单例模式</h3><p>在oc中设计单例模式代码大致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+（SSnetWorkManager *）sharedManger;</span><br><span class=\"line\">+ (SSnetWorkManager *)sharedManger&#123;</span><br><span class=\"line\">    static SSnetWorkManager *instance = nil;</span><br><span class=\"line\">    static dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(&amp;onceToken,^&#123;</span><br><span class=\"line\">        instance = [SSnetWorkManager alloc]init];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Swift中设计的单例代码如下</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SSNetWorkManager</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> <span class=\"type\">SSNetWorkManager</span>()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SSSNetWorkManager</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> shared <span class=\"operator\">=</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">SSSNetWorkManager</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">init</span>()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在初始化器 <code>init</code> 前用 <code>private</code> 修饰，可以将被修饰的初始化器进行私有，外部访问只能通过 shared 来进行访问。</p>\n<p>在 OC 中，我们在设计单例模式的时候，为了保证线程安全，通常会配合 <code>dispatch_once</code> 来创建实例，以保证单例对象在内存中只有一份。但在写 <code>Swift</code> 的单例的时候，并不需要写 <code>dispatch_once</code> 来配合创建实例，那 Swift 的单例是如何保证线程安全的呢？请往下看。</p>\n<h4 id=\"Swift单例模式的本质\"><a href=\"#Swift单例模式的本质\" class=\"headerlink\" title=\"Swift单例模式的本质\"></a>Swift单例模式的本质</h4><p>编译后的sil代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@_hasMissingDesignatedInitializers public <span class=\"keyword\">class</span> <span class=\"title class_\">SHNetworkManager</span> &#123;</span><br><span class=\"line\">    @_hasStorage @_hasInitialValue public <span class=\"keyword\">static</span> <span class=\"keyword\">let</span> <span class=\"attr\">shared</span>: <span class=\"title class_\">SHNetworkManager</span> &#123; get &#125;</span><br><span class=\"line\">    private <span class=\"title function_\">init</span>()</span><br><span class=\"line\">    @objc deinit</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getter实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// static SHNetworkManager.shared.getter</span></span><br><span class=\"line\">sil [transparent] @$s14ViewController16SHNetworkManagerC6sharedACvgZ : $@<span class=\"title function_\">convention</span>(method) (@thick <span class=\"title class_\">SHNetworkManager</span>.<span class=\"property\">Type</span>) -&gt; @owned <span class=\"title class_\">SHNetworkManager</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// %0 &quot;self&quot;                                      // user: %1</span></span><br><span class=\"line\">    <span class=\"title function_\">bb0</span>(%<span class=\"number\">0</span> : $@thick <span class=\"title class_\">SHNetworkManager</span>.<span class=\"property\">Type</span>):</span><br><span class=\"line\">    debug_value %<span class=\"number\">0</span> : $@thick <span class=\"title class_\">SHNetworkManager</span>.<span class=\"property\">Type</span>, <span class=\"keyword\">let</span>, name <span class=\"string\">&quot;self&quot;</span>, argno <span class=\"number\">1</span> <span class=\"comment\">// id: %1</span></span><br><span class=\"line\">    <span class=\"comment\">// function_ref SHNetworkManager.shared.unsafeMutableAddressor 看这里</span></span><br><span class=\"line\">    %<span class=\"number\">2</span> = function_ref @$s14ViewController16SHNetworkManagerC6sharedACvau : $@<span class=\"title function_\">convention</span>(thin) () -&gt; <span class=\"title class_\">Builtin</span>.<span class=\"property\">RawPointer</span> <span class=\"comment\">// user: %3</span></span><br><span class=\"line\">    %<span class=\"number\">3</span> = apply %<span class=\"number\">2</span>() : $@<span class=\"title function_\">convention</span>(thin) () -&gt; <span class=\"title class_\">Builtin</span>.<span class=\"property\">RawPointer</span> <span class=\"comment\">// user: %4</span></span><br><span class=\"line\">    %<span class=\"number\">4</span> = pointer_to_address %<span class=\"number\">3</span> : $Builtin.<span class=\"property\">RawPointer</span> to [strict] $*<span class=\"title class_\">SHNetworkManager</span> <span class=\"comment\">// user: %5</span></span><br><span class=\"line\">    %<span class=\"number\">5</span> = load %<span class=\"number\">4</span> : $*<span class=\"title class_\">SHNetworkManager</span>               <span class=\"comment\">// users: %7, %6</span></span><br><span class=\"line\">    strong_retain %<span class=\"number\">5</span> : $SHNetworkManager            <span class=\"comment\">// id: %6</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> %<span class=\"number\">5</span> : $SHNetworkManager                   <span class=\"comment\">// id: %7</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// end sil function &#x27;$s14ViewController16SHNetworkManagerC6sharedACvgZ&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 getter 中，调用了一个 <code>unsafeMutableAddressor</code> 方法，<code>unsafeMutableAddressor</code> 的实现如下：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>SHNetworkManager.shared.unsafeMutableAddressor</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sil [global_init] @$s14ViewController16SHNetworkManagerC6sharedACvau : $@convention(thin) () -&gt; Builtin.RawPointer &#123;</span><br><span class=\"line\">bb0:</span><br><span class=\"line\">%0 = global_addr @$s14ViewController16SHNetworkManagerC6shared_Wz : $*Builtin.Word // user: %1</span><br><span class=\"line\">%1 = address_to_pointer %0 : $*Builtin.Word to $Builtin.RawPointer // user: %3</span><br><span class=\"line\">// function_ref one-time initialization function for shared</span><br><span class=\"line\">//共享的一次性初始化函数</span><br><span class=\"line\">%2 = function_ref @$s14ViewController16SHNetworkManagerC6shared_WZ : $@convention(c) () -&gt; () // user: %3</span><br><span class=\"line\">**//看这里的once** </span><br><span class=\"line\">%3 = builtin &quot;once&quot;(%1 : $Builtin.RawPointer, %2 : $@convention(c) () -&gt; ()) : $()</span><br><span class=\"line\">%4 = global_addr @$s14ViewController16SHNetworkManagerC6sharedACvpZ : $*SHNetworkManager // user: %5</span><br><span class=\"line\">%5 = address_to_pointer %4 : $*SHNetworkManager to $Builtin.RawPointer // user: %6</span><br><span class=\"line\">return %5 : $Builtin.RawPointer                 // id: %6</span><br><span class=\"line\">&#125; // end sil function &#x27;$s14ViewController16SHNetworkManagerC6sharedACvau&#x27;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译出ir代码，全局来查找once。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swiftc -emit-ir $&#123;<span class=\"variable constant_\">SRCROOT</span>&#125;/<span class=\"title class_\">LGSwiftTest</span>/main.<span class=\"property\">swift</span> &gt; ./main.<span class=\"property\">ll</span> &amp;&amp; open main.<span class=\"property\">ll</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define swiftcc i8* @<span class=\"string\">&quot;$s4main16SSNetWorkManagerC6sharedACvau&quot;</span>() #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">entry</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">  %<span class=\"number\">0</span> = load i64, i64* @<span class=\"string\">&quot;$s4main16SSNetWorkManagerC6shared_Wz&quot;</span>, align <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">  %<span class=\"number\">1</span> = icmp eq i64 %<span class=\"number\">0</span>, -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  %<span class=\"number\">2</span> = call i1 @llvm.<span class=\"property\">expect</span>.<span class=\"title function_\">i1</span>(i1 %<span class=\"number\">1</span>, i1 <span class=\"literal\">true</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  br i1 %<span class=\"number\">2</span>, label %once_done, label %once_not_done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">once_done</span>:                                        ; preds = %once_not_done, %entry</span><br><span class=\"line\"></span><br><span class=\"line\">  %<span class=\"number\">3</span> = load i64, i64* @<span class=\"string\">&quot;$s4main16SSNetWorkManagerC6shared_Wz&quot;</span>, align <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">  %<span class=\"number\">4</span> = icmp eq i64 %<span class=\"number\">3</span>, -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  call <span class=\"keyword\">void</span> @llvm.<span class=\"title function_\">assume</span>(i1 %<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  ret i8* bitcast (%T4main16SSNetWorkManagerC** @<span class=\"string\">&quot;$s4main16SSNetWorkManagerC6sharedACvpZ&quot;</span> to i8*)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">once_not_done</span>:                                    ; preds = %entry</span><br><span class=\"line\"></span><br><span class=\"line\">  call <span class=\"keyword\">void</span> @<span class=\"title function_\">swift_once</span>(i64* @<span class=\"string\">&quot;$s4main16SSNetWorkManagerC6shared_Wz&quot;</span>, i8* bitcast (<span class=\"keyword\">void</span> ()* @<span class=\"string\">&quot;$s4main16SSNetWorkManagerC6shared_WZ&quot;</span> to i8*), i8* undef)</span><br><span class=\"line\"></span><br><span class=\"line\">  br label %once_done</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>混写过后的方法<code>s14ViewController16SHNetworkManagerC6sharedACvau</code>，在sil代码中是<code>SHNetworkManager.shared.unsafeMutableAddressor</code>，下面有once_not_done，里面有swift_once，<br>猜测它是一个swift内部的一个函数，在swift源码中搜索，在源码中<strong>Once.cpp</strong>中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Runs the given function with the given context argument exactly once.</span><br><span class=\"line\">/// The predicate argument must point to a global or static variable of static</span><br><span class=\"line\">/// extent of type swift_once_t.</span><br><span class=\"line\">void swift::swift_once(swift_once_t *predicate, void (*fn)(void *),</span><br><span class=\"line\">                       void *context) &#123;</span><br><span class=\"line\">#ifdef SWIFT_STDLIB_SINGLE_THREADED_RUNTIME</span><br><span class=\"line\">  if (! *predicate) &#123;</span><br><span class=\"line\">    *predicate = true;</span><br><span class=\"line\">    fn(context);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">#elif defined(__APPLE__)</span><br><span class=\"line\">  dispatch_once_f(predicate, context, fn);</span><br><span class=\"line\">#elif defined(__CYGWIN__)</span><br><span class=\"line\">  _swift_once_f(predicate, context, fn);</span><br><span class=\"line\">#else</span><br><span class=\"line\">  std::call_once(*predicate, [fn, context]() &#123; fn(context); &#125;);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果等于 <code>__APPLE__</code>，会调用 <code>dispatch_once_f</code> 函数，就是 iOS 中 <strong>GCD</strong> 的函数。所以 Swift 中单例模式在底层中是和 OC 一样，都调用了 <strong>GCD</strong> 的函数。并且这个函数在执行一次后就不会在执行，以保证线程安全。</p>\n<h1 id=\"属性在Mach-O中的位置\"><a href=\"#属性在Mach-O中的位置\" class=\"headerlink\" title=\"属性在Mach-O中的位置\"></a>属性在Mach-O中的位置</h1><p>类的方法是存放在VTable中。<br>Swift类的本质是一个HeapObject的结构体指针，在HeapObject中有一个metadata，metadata中有一个Description成员变量，Description是名为TargeClassDescription的类，在TargetDescription中有一个VTable存储Swift类中的方法。<br>那么Swift中类的属性又放在哪里呢，我们来看一个TatgetClassDescription的结构：它继承了两个类，这是抽出来的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TargetClassDescriptor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">flags</span>: <span class=\"title class_\">UInt32</span> <span class=\"number\">4</span>字节</span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">parent</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">name</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">accessFunctionPointer</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">fieldDescriptor</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">superClassType</span>: <span class=\"title class_\">Int32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">metadataNegativeSizeInWords</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">metadataPositiveSizeInWords</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">numImmediateMembers</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">numFields</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"attr\">fieldOffsetVectorOffset</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"title class_\">Offset</span>: <span class=\"title class_\">UInt32</span></span><br><span class=\"line\">    <span class=\"comment\">// var size: UInt32</span></span><br><span class=\"line\">    <span class=\"comment\">//V-Table</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SWift类的属性存放在fieldDescription中的，其源码定义在Metadata.h中的TargetTypeContextDescription类中，注意：<strong>TatgetClassDescription</strong>继承自<strong>TargetTypeContextDescriptor</strong>。<br>源码定义如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// A pointer to the field descriptor for the type, if any.</span></span><br><span class=\"line\"><span class=\"title class_\">TargetRelativeDirectPointer</span>&lt;<span class=\"title class_\">Runtime</span>, <span class=\"keyword\">const</span> <span class=\"attr\">reflection</span>::<span class=\"title class_\">FieldDescriptor</span>, <span class=\"comment\">/*nullable*/</span> <span class=\"literal\">true</span>&gt; <span class=\"title class_\">Fields</span>;</span><br></pre></td></tr></table></figure>\n<p>点进去看FieldDescription的结构大致如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Field descriptors contain a collection of field records for a single</span></span><br><span class=\"line\"><span class=\"comment\">// class, struct or enum declaration.</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FieldDescriptor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *<span class=\"title function_\">getFieldRecordBuffer</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reinterpret_cast&lt;<span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *&gt;(<span class=\"variable language_\">this</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">RelativeDirectPointer</span>&lt;<span class=\"keyword\">const</span> char&gt; <span class=\"title class_\">MangledTypeName</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">RelativeDirectPointer</span>&lt;<span class=\"keyword\">const</span> char&gt; <span class=\"title class_\">Superclass</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FieldDescriptor</span>() = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldDescriptorKind</span> <span class=\"title class_\">Kind</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uint16_t <span class=\"title class_\">FieldRecordSize</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> uint32_t <span class=\"title class_\">NumFields</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  using const_iterator = <span class=\"title class_\">FieldRecordIterator</span>;</span><br></pre></td></tr></table></figure>\n<p>整理出来，FieldDescriptor的结构体大致如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FieldDescriptor</span>&#123;</span><br><span class=\"line\">    <span class=\"title class_\">MangledTypeName</span> int32</span><br><span class=\"line\">    <span class=\"title class_\">Superclass</span> int32</span><br><span class=\"line\">    <span class=\"title class_\">Kind</span> uint16</span><br><span class=\"line\">    <span class=\"title class_\">FieldRecordSize</span> uint16</span><br><span class=\"line\">    <span class=\"title class_\">NumFields</span> int32</span><br><span class=\"line\">    <span class=\"comment\">//这个没有体现出来 便于理解写在下面 源码里是这个</span></span><br><span class=\"line\">    <span class=\"comment\">//using const_iterator = FieldRecordIterator;</span></span><br><span class=\"line\">    <span class=\"title class_\">FieldRecords</span> 【<span class=\"title class_\">FiedlRecord</span>】</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在FieldDescriptor中有这么几个方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const_iterator <span class=\"title function_\">begin</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">   auto <span class=\"title class_\">Begin</span> = <span class=\"title function_\">getFieldRecordBuffer</span>();</span><br><span class=\"line\">   auto <span class=\"title class_\">End</span> = <span class=\"title class_\">Begin</span> + <span class=\"title class_\">NumFields</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> const_iterator &#123; <span class=\"title class_\">Begin</span>, <span class=\"title class_\">End</span> &#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> const_iterator <span class=\"title function_\">end</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">   auto <span class=\"title class_\">Begin</span> = <span class=\"title function_\">getFieldRecordBuffer</span>();</span><br><span class=\"line\">   auto <span class=\"title class_\">End</span> = <span class=\"title class_\">Begin</span> + <span class=\"title class_\">NumFields</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> const_iterator &#123; <span class=\"title class_\">End</span>, <span class=\"title class_\">End</span> &#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">llvm</span>::<span class=\"title class_\">ArrayRef</span>&lt;<span class=\"title class_\">FieldRecord</span>&gt; <span class=\"title function_\">getFields</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;<span class=\"title function_\">getFieldRecordBuffer</span>(), <span class=\"title class_\">NumFields</span>&#125;;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>从这三个方法可以看出这个是迭代器，const_iterator是FieldRecordIterator，其源码结构如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct <span class=\"title class_\">FieldRecordIterator</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *<span class=\"title class_\">Cur</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> * <span class=\"keyword\">const</span> <span class=\"title class_\">End</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FieldRecordIterator</span>(<span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *<span class=\"title class_\">Cur</span>, <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> * <span class=\"keyword\">const</span> <span class=\"title class_\">End</span>)</span><br><span class=\"line\">    : <span class=\"title class_\">Cur</span>(<span class=\"title class_\">Cur</span>), <span class=\"title class_\">End</span>(<span class=\"title class_\">End</span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> &amp;operator*() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"title class_\">Cur</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecord</span> *operator-&gt;() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Cur</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FieldRecordIterator</span> &amp;operator++() &#123;</span><br><span class=\"line\">    ++<span class=\"title class_\">Cur</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bool operator==(<span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecordIterator</span> &amp;other) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Cur</span> == other.<span class=\"property\">Cur</span> &amp;&amp; <span class=\"title class_\">End</span> == other.<span class=\"property\">End</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bool operator!=(<span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecordIterator</span> &amp;other) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(*<span class=\"variable language_\">this</span> == other);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>成员变量为FieldRecord，我们来看一下它在源码的结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FieldRecord</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">FieldRecordFlags</span> <span class=\"title class_\">Flags</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">RelativeDirectPointer</span>&lt;<span class=\"keyword\">const</span> char&gt; <span class=\"title class_\">MangledTypeName</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">RelativeDirectPointer</span>&lt;<span class=\"keyword\">const</span> char&gt; <span class=\"title class_\">FieldName</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">FieldRecord</span>() = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  bool <span class=\"title function_\">hasMangledTypeName</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">MangledTypeName</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">StringRef</span> <span class=\"title function_\">getMangledTypeName</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Demangle</span>::<span class=\"title function_\">makeSymbolicMangledNameStringRef</span>(<span class=\"title class_\">MangledTypeName</span>.<span class=\"title function_\">get</span>());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">StringRef</span> <span class=\"title function_\">getFieldName</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">FieldName</span>.<span class=\"title function_\">get</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bool <span class=\"title function_\">isIndirectCase</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Flags</span>.<span class=\"title function_\">isIndirectCase</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  bool <span class=\"title function_\">isVar</span>() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Flags</span>.<span class=\"title function_\">isVar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>他有三个成员变量：Flags,MangledTypeName,FieldName.Flags不用管，MangledTypeName为它的类型信息，FieldName是它的属性的名称信息。<br>到这里，我们基本可以确定属性存储在底层源码的结构以及位置，我们的查找流程如下：</p>\n<ul>\n<li>找到<strong>HeapObject</strong>。</li>\n<li>从<strong>HeapObject</strong>中找到<strong>HeapMetaData</strong>。</li>\n<li>继续跟进，<strong>HeapMetadata</strong>为 <strong>TargetHeapMetadata</strong>的别名</li>\n<li>找到<strong>TargetHeapMetadata</strong>结构体，找到<strong>TargetClassDescriptor</strong>，然后找到<strong>TargetTypeContextDescriptor</strong>，并且找到了<strong>Fields</strong>成员变量。</li>\n<li>通过Fields找到了<strong>FieldDescriptor</strong>的定义，并且找到其中的<strong>FieldRecords</strong>，</li>\n<li>通过迭代器<strong>FieldRecodIterator</strong>，找到了<strong>FieldRecord</strong>。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}